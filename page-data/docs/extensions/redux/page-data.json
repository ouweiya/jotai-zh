{"componentChunkName":"component---src-pages-docs-mdx-slug-js","path":"/docs/extensions/redux","result":{"data":{"mdx":{"slug":"extensions/redux","frontmatter":{"title":"Redux","description":"This doc describes Redux extension."},"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {\n  \"title\": \"Redux\",\n  \"description\": \"This doc describes Redux extension.\",\n  \"nav\": 4.98,\n  \"keywords\": \"redux\",\n  \"published\": false\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\nconst CodeSandbox = makeShortcode(\"CodeSandbox\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Jotai\\u7684\\u72B6\\u6001\\u5B58\\u5728\\u4E8EReact\\u4E2D\\uFF0C\\u4F46\\u6709\\u65F6\\u5019\\u6211\\u4EEC\\u5E0C\\u671B\\u80FD\\u4E0EReact\\u4E4B\\u5916\\u7684\\u4E16\\u754C\\u8FDB\\u884C\\u4EA4\\u4E92\\u3002\"), mdx(\"p\", null, \"Redux\\u63D0\\u4F9B\\u4E86\\u4E00\\u4E2A\\u5B58\\u50A8\\u63A5\\u53E3\\uFF0C\\u53EF\\u4EE5\\u7528\\u6765\\u5B58\\u50A8\\u4E00\\u4E9B\\u503C\\uFF0C\\u5E76\\u4E0EJotai\\u4E2D\\u7684\\u539F\\u5B50\\u8FDB\\u884C\\u540C\\u6B65\\u3002\"), mdx(\"h3\", null, \"\\u5B89\\u88C5 {#install}\"), mdx(\"p\", null, \"\\u8981\\u4F7F\\u7528\\u6B64\\u529F\\u80FD\\uFF0C\\u4F60\\u5FC5\\u987B\\u5B89\\u88C5\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"redux\"), \"\\u548C\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jotai-redux\"), \"\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"npm i redux jotai-redux\\n\")), mdx(\"h2\", null, \"atomWithStore {#atomwithstore}\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithStore\"), \"\\u521B\\u5EFA\\u4E00\\u4E2A\\u65B0\\u7684\\u5E26\\u6709redux\\u5B58\\u50A8\\u7684\\u539F\\u5B50\\u3002\\u5B83\\u662F\\u53CC\\u5411\\u7ED1\\u5B9A\\u7684\\uFF0C\\u4F60\\u53EF\\u4EE5\\u4ECE\\u4E24\\u7AEF\\u66F4\\u6539\\u503C\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { useAtom } from 'jotai'\\nimport { atomWithStore } from 'jotai-redux'\\nimport { createStore } from 'redux'\\n\\nconst initialState = { count: 0 }\\nconst reducer = (state = initialState, action: { type: 'INC' }) => {\\n  if (action.type === 'INC') {\\n    return { ...state, count: state.count + 1 }\\n  }\\n  return state\\n}\\nconst store = createStore(reducer)\\nconst storeAtom = atomWithStore(store)\\n\\nconst Counter = () => {\\n  const [state, dispatch] = useAtom(storeAtom)\\n\\n  return (\\n    <>\\n      count: {state.count}\\n      <button onClick={() => dispatch({ type: 'INC' })}>\\u6309\\u94AE</button>\\n    </>\\n  )\\n}\\n\")), mdx(\"h3\", null, \"\\u793A\\u4F8B {#examples}\"), mdx(CodeSandbox, {\n    id: \"487792\",\n    mdxType: \"CodeSandbox\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"3d9e0c08-cebb-584d-8a59-ab5b4c224bf3","slug":"extensions/redux","__params":{"slug":"extensions"}}},"staticQueryHashes":["171421096","930225796"]}