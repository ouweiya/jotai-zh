{"componentChunkName":"component---src-pages-docs-mdx-slug-js","path":"/docs/extensions/immer","result":{"data":{"mdx":{"slug":"extensions/immer","frontmatter":{"title":"Immer","description":"This doc describes Immer extension."},"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {\n  \"title\": \"Immer\",\n  \"description\": \"This doc describes Immer extension.\",\n  \"nav\": 4.04,\n  \"keywords\": \"immer\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\nconst CodeSandbox = makeShortcode(\"CodeSandbox\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"\\u5B89\\u88C5 {#install}\"), mdx(\"p\", null, \"\\u8981\\u4F7F\\u7528\\u6B64\\u529F\\u80FD\\uFF0C\\u4F60\\u5FC5\\u987B\\u5B89\\u88C5 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"immer\"), \" \\u548C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jotai-immer\"), \"\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"npm i immer jotai-immer\\n\")), mdx(\"h2\", null, \"atomWithImmer {#atomwithimmer}\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithImmer\"), \" \\u521B\\u5EFA\\u4E00\\u4E2A\\u65B0\\u7684 atom\\uFF0C\\u7C7B\\u4F3C\\u4E8E\\u5E38\\u89C4\\u7684 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../core/atom.mdx\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"atom\")), \" \", \"[atom]\", \"\\uFF0C\\u4F46\\u5177\\u6709\\u4E0D\\u540C\\u7684 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"writeFunction\"), \"\\u3002\\u5728\\u8FD9\\u4E2A\\u5305\\u4E2D\\uFF0C\\u6211\\u4EEC\\u6CA1\\u6709\\u53EA\\u8BFB\\u7684 atoms\\uFF0C\\u56E0\\u4E3A\\u8FD9\\u4E9B\\u51FD\\u6570\\u7684\\u76EE\\u7684\\u662F immer produce(\\u53EF\\u53D8\\u6027)\\u51FD\\u6570\\u3002\\nwriteFunction \\u7684\\u7B7E\\u540D\\u662F \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(get, set, update: (draft: Draft<Value>) => void) => void\"), \"\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { useAtom } from 'jotai'\\nimport { atomWithImmer } from 'jotai-immer'\\n\\nconst countAtom = atomWithImmer({ value: 0 })\\n\\nconst Counter = () => {\\n  const [count] = useAtom(countAtom)\\n  return <div>\\u8BA1\\u6570: {count.value}</div>\\n}\\n\\nconst Controls = () => {\\n  const [, setCount] = useAtom(countAtom)\\n  // setCount === update : (draft: Draft<Value>) => void\\n  const inc = () =>\\n    setCount((draft) => {\\n      ++draft.value\\n    })\\n  return <button onClick={inc}>+1</button>\\n}\\n\")), mdx(\"h3\", null, \"\\u793A\\u4F8B {#examples}\"), mdx(\"p\", null, \"\\u67E5\\u770B\\u8FD9\\u4E2A\\u4F7F\\u7528 atomWithImmer \\u7684\\u793A\\u4F8B\\uFF1A\"), mdx(CodeSandbox, {\n    id: \"83l6sr\",\n    mdxType: \"CodeSandbox\"\n  }), mdx(\"h2\", null, \"withImmer {#withimmer}\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"withImmer\"), \" \\u63A5\\u6536\\u4E00\\u4E2A atom \\u5E76\\u8FD4\\u56DE\\u4E00\\u4E2A\\u6D3E\\u751F\\u7684 atom\\uFF0C\\u5C31\\u50CF \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithImmer\"), \" \\u4E00\\u6837\\uFF0C\\u5B83\\u6709\\u4E00\\u4E2A\\u4E0D\\u540C\\u7684 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"writeFunction\"), \"\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { useAtom, atom } from 'jotai'\\nimport { withImmer } from 'jotai-immer'\\n\\nconst primitiveAtom = atom({ value: 0 })\\nconst countAtom = withImmer(primitiveAtom)\\n\\nconst Counter = () => {\\n  const [count] = useAtom(countAtom)\\n  return <div>\\u8BA1\\u6570: {count.value}</div>\\n}\\n\\nconst Controls = () => {\\n  const [, setCount] = useAtom(countAtom)\\n  // setCount === update : (draft: Draft<Value>) => void\\n  const inc = () =>\\n    setCount((draft) => {\\n      ++draft.value\\n    })\\n  return <button onClick={inc}>+1</button>\\n}\\n\")), mdx(\"h3\", null, \"\\u793A\\u4F8B {#examples}\"), mdx(\"p\", null, \"\\u67E5\\u770B\\u8FD9\\u4E2A\\u4F7F\\u7528 withImmer \\u7684\\u793A\\u4F8B\\uFF1A\"), mdx(CodeSandbox, {\n    id: \"fn49h2\",\n    mdxType: \"CodeSandbox\"\n  }), mdx(\"h2\", null, \"useImmerAtom {#useimmeratom}\"), mdx(\"p\", null, \"\\u8FD9\\u4E2A hook \\u63A5\\u6536\\u4E00\\u4E2A atom \\u5E76\\u7528\\u65B0\\u7684\\u7C7B\\u4F3C immer \\u7684 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"writeFunction\"), \" \\u66FF\\u6362 atom \\u7684 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"writeFunction\"), \"\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { useAtom } from 'jotai'\\nimport { useImmerAtom } from 'jotai-immer'\\n\\nconst primitiveAtom = atom({ value: 0 })\\n\\nconst Counter = () => {\\n  const [count] = useImmerAtom(primitiveAtom)\\n  return <div>\\u8BA1\\u6570: {count.value}</div>\\n}\\n\\nconst Controls = () => {\\n  const [, setCount] = useImmerAtom(primitiveAtom)\\n  // setCount === update : (draft: Draft<Value>) => void\\n  const inc = () =>\\n    setCount((draft) => {\\n      ++draft.value\\n    })\\n  return <button onClick={inc}>+1</button>\\n}\\n\")), mdx(\"p\", null, \"\\u5982\\u679C\\u4F60\\u4E0D\\u4F7F\\u7528 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"withImmer\"), \" \\u548C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithImmer\"), \" \\u4E0E \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useImmerAtom\"), \" \\u4E00\\u8D77\\u4F7F\\u7528\\u4F1A\\u66F4\\u597D\\uFF0C\\u56E0\\u4E3A\\u5B83\\u4EEC\\u63D0\\u4F9B\\u4E86\\u7C7B\\u4F3C immer \\u7684 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"writeFunction\"), \"\\uFF0C\\u6211\\u4EEC\\u4E0D\\u9700\\u8981\\u521B\\u5EFA\\u4E00\\u4E2A\\u65B0\\u7684\\u3002\"), mdx(\"p\", null, \"\\u5982\\u679C\\u4F60\\u53EA\\u9700\\u8981 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useImmerAtom\"), \" \\u7684 setter \\u90E8\\u5206\\uFF0C\\u53EF\\u4EE5\\u4F7F\\u7528 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useSetImmerAtom\"), \"\\u3002\"), mdx(\"h3\", null, \"\\u793A\\u4F8B {#examples}\"), mdx(\"p\", null, \"\\u67E5\\u770B\\u8FD9\\u4E2A\\u4F7F\\u7528 useImmerAtom \\u7684\\u793A\\u4F8B\\uFF1A\"), mdx(CodeSandbox, {\n    id: \"np7y97\",\n    mdxType: \"CodeSandbox\"\n  }), mdx(\"h2\", null, \"\\u6F14\\u793A {#demo}\"), mdx(CodeSandbox, {\n    id: \"9q4dg7\",\n    mdxType: \"CodeSandbox\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"4a861a59-2913-541f-aefe-ec1088729849","slug":"extensions/immer","__params":{"slug":"extensions"}}},"staticQueryHashes":["171421096","930225796"]}