{"componentChunkName":"component---src-pages-docs-mdx-slug-js","path":"/docs/extensions/scope","result":{"data":{"mdx":{"slug":"extensions/scope","frontmatter":{"title":"Scope","description":"This doc describes scope extension."},"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {\n  \"title\": \"Scope\",\n  \"description\": \"This doc describes scope extension.\",\n  \"nav\": 4.08,\n  \"keywords\": \"scope\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\nconst CodeSandbox = makeShortcode(\"CodeSandbox\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\u8FD9\\u91CC\\u6709\\u4E00\\u4E9B\\u5E93\\u53EF\\u4EE5\\u6269\\u5C55\\u5728React\\u4E2D\\u4F7F\\u7528Jotai\\u7684\\u65B9\\u5F0F\\u3002\"), mdx(\"h2\", null, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"jotai-scope\"), \" {#jotai-scope}\"), mdx(\"p\", null, \"\\u867D\\u7136Jotai\\u7684Provider\\u5141\\u8BB8\\u5728\\u5B50\\u6811\\u4E0B\\u5212\\u5B9AJotai\\u7684\\u5B58\\u50A8\\u8303\\u56F4\\uFF0C\\u4F46\\u6211\\u4EEC\\u4E0D\\u80FD\\u5728\\u5B50\\u6811\\u5185\\u4F7F\\u7528\\u6811\\u4E0A\\u65B9\\u7684\\u5B58\\u50A8\\u3002\"), mdx(\"p\", null, \"\\u4E00\\u4E2A\\u89E3\\u51B3\\u65B9\\u6CD5\\u662F\\u5728useAtom\\u548C\\u5176\\u4ED6\\u94A9\\u5B50\\u4E2D\\u4F7F\\u7528\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"store\"), \"\\u9009\\u9879\\u3002\\u4E3A\\u4E86\\u7B80\\u5316\\u8FD9\\u79CD\\u7528\\u4F8B\\uFF0C\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jotai-scope\"), \"\\u63D0\\u4F9B\\u4E86\\u4E00\\u4E2A\\u6709\\u8303\\u56F4\\u7684\\u63D0\\u4F9B\\u8005\\u548C\\u94A9\\u5B50\\u3002\\u800C\\u4E0D\\u662F\\u6307\\u5B9A\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"store\"), \"\\u9009\\u9879\\uFF0C\\u6709\\u8303\\u56F4\\u7684\\u63D0\\u4F9B\\u8005\\u63A5\\u53D7\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atoms\"), \"\\u5C5E\\u6027\\uFF0C\\u8FD9\\u4E9B\\u539F\\u5B50\\u7684\\u4F7F\\u7528\\u5728\\u5B50\\u6811\\u5185\\u6709\\u8303\\u56F4\\u3002\"), mdx(\"h3\", null, \"\\u5B89\\u88C5 {#install}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"npm i jotai-scope\\n\")), mdx(\"h3\", null, \"\\u8BA1\\u6570\\u5668\\u793A\\u4F8B {#counter-example}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { atom, useAtom } from 'jotai'\\nimport { ScopeProvider } from 'jotai-scope'\\n\\nconst countAtom = atom(0)\\nconst anotherCountAtom = atom(0)\\n\\nconst Counter = () => {\\n  const [count, setCount] = useAtom(countAtom)\\n  const [anotherCount, setAnotherCount] = useAtom(anotherCountAtom)\\n  return (\\n    <>\\n      <div>\\n        <span>\\u8BA1\\u6570\\uFF1A {count}</span>\\n        <button type=\\\"button\\\" onClick={() => setCount((c) => c + 1)}>\\n          \\u589E\\u52A0\\n        </button>\\n      </div>\\n      <div>\\n        <span>\\u53E6\\u4E00\\u4E2A\\u8BA1\\u6570\\uFF1A {anotherCount}</span>\\n        <button type=\\\"button\\\" onClick={() => setAnotherCount((c) => c + 1)}>\\n          \\u589E\\u52A0\\n        </button>\\n      </div>\\n    </>\\n  )\\n}\\n\\nconst App = () => {\\n  return (\\n    <div>\\n      <h1>\\u7B2C\\u4E00\\u4E2A\\u63D0\\u4F9B\\u8005</h1>\\n      <ScopeProvider atoms={[anotherCountAtom]}>\\n        <Counter />\\n      </ScopeProvider>\\n      <h1>\\u7B2C\\u4E8C\\u4E2A\\u63D0\\u4F9B\\u8005</h1>\\n      <ScopeProvider atoms={[anotherCountAtom]}>\\n        <Counter />\\n      </ScopeProvider>\\n    </div>\\n  )\\n}\\n\")), mdx(CodeSandbox, {\n    id: \"rf3r4n\",\n    mdxType: \"CodeSandbox\"\n  }), mdx(\"h2\", null, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"createIsolation\"), \" {#\", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"createisolation\"), \"}\"), mdx(\"p\", null, \"Jotai\\u7684Provider\\u548C\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jotai-scope\"), \"\\u7684\\u6709\\u8303\\u56F4\\u7684\\u63D0\\u4F9B\\u8005\\u4ECD\\u7136\\u4F7F\\u7528\\u5168\\u5C40\\u4E0A\\u4E0B\\u6587\\u3002\"), mdx(\"p\", null, \"\\u5982\\u679C\\u4F60\\u6B63\\u5728\\u5F00\\u53D1\\u4E00\\u4E2A\\u4F9D\\u8D56\\u4E8EJotai\\u7684\\u5E93\\uFF0C\\u5E76\\u4E14\\u5E93\\u7528\\u6237\\u53EF\\u80FD\\u5728\\u4ED6\\u4EEC\\u7684\\u5E94\\u7528\\u4E2D\\u5355\\u72EC\\u4F7F\\u7528Jotai\\uFF0C\\u4ED6\\u4EEC\\u53EF\\u4EE5\\u5171\\u4EAB\\u76F8\\u540C\\u7684\\u4E0A\\u4E0B\\u6587\\u3002\\u8FD9\\u53EF\\u80FD\\u4F1A\\u5F15\\u8D77\\u95EE\\u9898\\uFF0C\\u56E0\\u4E3A\\u4ED6\\u4EEC\\u6307\\u5411\\u610F\\u5916\\u7684Jotai\\u5B58\\u50A8\\u3002\"), mdx(\"p\", null, \"\\u4E3A\\u4E86\\u907F\\u514D\\u4E0A\\u4E0B\\u6587\\u51B2\\u7A81\\uFF0C\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jotai-scope\"), \"\\u5BFC\\u51FA\\u4E86\\u4E00\\u4E2A\\u540D\\u4E3A\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createIsolation\"), \"\\u7684\\u5B9E\\u7528\\u51FD\\u6570\\u3002\"), mdx(\"p\", null, \"\\u67E5\\u770B\\u4ED3\\u5E93\\u4E2D\\u7684\\u793A\\u4F8B\\uFF1A\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/jotaijs/jotai-scope/tree/main/examples/01_isolation\"\n  }, \"https://github.com/jotaijs/jotai-scope/tree/main/examples/01_isolation\")), mdx(\"h2\", null, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"bunshi\"), \"\\uFF08\\u524D\\u8EAB\\u4E3A\", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"jotai-molecules\"), \"\\uFF09 {#\", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"bunshi\"), \"-(formerly-\", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"jotai-molecules\"), \")}\"), mdx(\"p\", null, \"Jotai\\u539F\\u5B50\\u63D0\\u4F9B\\u4E86\\u4E00\\u4E2A\\u57FA\\u672C\\u7684\\u89E3\\u51B3\\u65B9\\u6848\\u6765\\u4F18\\u5316\\u91CD\\u65B0\\u6E32\\u67D3\\u3002\\u5168\\u5C40\\u5B9A\\u4E49\\u7684\\u539F\\u5B50\\u53EF\\u4EE5\\u4F9D\\u8D56\\u4E8E\\u5176\\u4ED6\\u539F\\u5B50\\uFF0C\\u4F46\\u662F\\u5B83\\u4EEC\\u4E0D\\u80FD\\u4F9D\\u8D56\\u4E8E\\u7EC4\\u4EF6\\u6811\\u5185\\u7684props\\u548Cstate\\u3002\\u5728\\u7EC4\\u4EF6\\u6811\\u5185\\u5B9A\\u4E49\\u539F\\u5B50\\u662F\\u53EF\\u80FD\\u7684\\uFF0C\\u4F46\\u662F\\u4F60\\u9700\\u8981\\u4EE5\\u67D0\\u79CD\\u65B9\\u5F0F\\u4F20\\u9012\\u8FD9\\u4E9B\\u539F\\u5B50\\uFF08\\u4F8B\\u5982\\uFF0C\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../guides/atoms-in-atom.mdx\"\n  }, \"atoms-in-atom\"), \".\\uFF09\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/saasquatch/bunshi\"\n  }, \"bunshi\"), \"\\u662F\\u4E00\\u4E2A\\u5E2E\\u52A9\\u8FD9\\u79CD\\u7528\\u4F8B\\u7684\\u7B2C\\u4E09\\u65B9\\u5E93\\u3002\"), mdx(\"p\", null, \"\\u67E5\\u770B\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/saasquatch/bunshi/tree/v1.1.1#motivation\"\n  }, \"\\u52A8\\u673A\"), \"\\u4EE5\\u83B7\\u53D6\\u66F4\\u591A\\u8BE6\\u7EC6\\u4FE1\\u606F\\u3002\"), mdx(\"h3\", null, \"\\u5B89\\u88C5 {#install}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"npm i bunshi\\n\")), mdx(\"h3\", null, \"\\u8BA1\\u6570\\u5668\\u793A\\u4F8B {#counter-example}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { atom, useAtom } from 'jotai'\\nimport { molecule, useMolecule, createScope, ScopeProvider } from 'bunshi/react'\\n\\nconst InitialCountScope = createScope(0)\\nconst countMolecule = molecule((getMol, getScope) => {\\n  const initialCont = getScope(InitialCountScope)\\n  return atom(initialCont)\\n})\\n\\nconst Counter = () => {\\n  const countAtom = useMolecule(countMolecule)\\n  const [count, setCount] = useAtom(countAtom)\\n  return (\\n    <div>\\n      {count} <button onClick={() => setCount((c) => c + 1)}>+1</button>\\n    </div>\\n  )\\n}\\n\\nconst App = () => (\\n  <div>\\n    <h1>\\u521D\\u59CB\\u503C\\u4E3A1</h1>\\n    <ScopeProvider scope={InitialCountScope} value={1}>\\n      <Counter />\\n      <Counter />\\n    </ScopeProvider>\\n    <h1>\\u521D\\u59CB\\u503C\\u4E3A2</h1>\\n    <ScopeProvider scope={InitialCountScope} value={2}>\\n      <Counter />\\n      <Counter />\\n    </ScopeProvider>\\n    <h1>\\u9ED8\\u8BA4</h1>\\n    <Counter />\\n    <Counter />\\n  </div>\\n)\\n\")), mdx(CodeSandbox, {\n    id: \"6dvlzf\",\n    mdxType: \"CodeSandbox\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"f0761177-6759-5c91-9a02-b3cf06281761","slug":"extensions/scope","__params":{"slug":"extensions"}}},"staticQueryHashes":["171421096","930225796"]}