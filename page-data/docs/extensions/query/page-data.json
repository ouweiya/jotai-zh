{"componentChunkName":"component---src-pages-docs-mdx-slug-js","path":"/docs/extensions/query","result":{"data":{"mdx":{"slug":"extensions/query","frontmatter":{"title":"Query","description":"This doc describes TanStack Query extension."},"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {\n  \"title\": \"Query\",\n  \"description\": \"This doc describes TanStack Query extension.\",\n  \"nav\": 4.02,\n  \"keywords\": \"tanstack,query\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\nconst CodeSandbox = makeShortcode(\"CodeSandbox\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://tanstack.com/query/\"\n  }, \"TanStack Query\"), \" \\u63D0\\u4F9B\\u4E86\\u4E00\\u7EC4\\u7528\\u4E8E\\u7BA1\\u7406\\u5F02\\u6B65\\u72B6\\u6001\\uFF08\\u901A\\u5E38\\u662F\\u5916\\u90E8\\u6570\\u636E\\uFF09\\u7684\\u51FD\\u6570\\u3002\"), mdx(\"p\", null, \"\\u4ECE\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://tanstack.com/query/v5/docs/overview\"\n  }, \"\\u6982\\u8FF0\\u6587\\u6863\"), \"\\u4E2D\\uFF1A\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"React Query \\u5E38\\u88AB\\u63CF\\u8FF0\\u4E3A React \\u7F3A\\u5931\\u7684\\u6570\\u636E\\u83B7\\u53D6\\u5E93\\uFF0C\\u4F46\\u66F4\\u6280\\u672F\\u7684\\u8BF4\\u6CD5\\u662F\\uFF0C\\u5B83\\u4F7F\\u5F97\\u5728\\u4F60\\u7684 React \\u5E94\\u7528\\u4E2D\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\u83B7\\u53D6\\u3001\\u7F13\\u5B58\\u3001\\u540C\\u6B65\\u548C\\u66F4\\u65B0\\u670D\\u52A1\\u5668\\u72B6\\u6001\"), \"\\u53D8\\u5F97\\u8F7B\\u800C\\u6613\\u4E3E\\u3002\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/jotai-labs/jotai-tanstack-query\"\n  }, \"jotai-tanstack-query\"), \" \\u662F TanStack Query \\u7684 Jotai \\u6269\\u5C55\\u5E93\\u3002\\u5B83\\u63D0\\u4F9B\\u4E86\\u4E00\\u4E2A\\u4E0E\\u6240\\u6709 TanStack Query \\u529F\\u80FD\\u7684\\u7F8E\\u5999\\u63A5\\u53E3\\uFF0C\\u4F7F\\u4F60\\u80FD\\u591F\\u5C06\\u8FD9\\u4E9B\\u529F\\u80FD\\u4E0E\\u4F60\\u73B0\\u6709\\u7684 Jotai \\u72B6\\u6001\\u7ED3\\u5408\\u4F7F\\u7528\\u3002\"), mdx(\"h3\", null, \"\\u652F\\u6301 {#support}\"), mdx(\"p\", null, \"jotai-tanstack-query \\u76EE\\u524D\\u652F\\u6301 TanStack Query v5\\u3002\"), mdx(\"h3\", null, \"\\u5B89\\u88C5 {#install}\"), mdx(\"p\", null, \"\\u9664\\u4E86 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jotai\"), \"\\uFF0C\\u4F60\\u8FD8\\u9700\\u8981\\u5B89\\u88C5 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jotai-tanstack-query\"), \"\\u3001\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@tanstack/query-core\"), \" \\u548C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"wonka\"), \" \\u6765\\u4F7F\\u7528\\u8FD9\\u4E2A\\u6269\\u5C55\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"npm i jotai-tanstack-query @tanstack/query-core wonka\\n\")), mdx(\"h3\", null, \"\\u6E10\\u8FDB\\u5F0F\\u91C7\\u7528 {#incremental-adoption}\"), mdx(\"p\", null, \"\\u4F60\\u53EF\\u4EE5\\u5728\\u4F60\\u7684\\u5E94\\u7528\\u4E2D\\u6E10\\u8FDB\\u5F0F\\u5730\\u91C7\\u7528 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jotai-tanstack-query\"), \"\\u3002\\u5B83\\u4E0D\\u662F\\u5168\\u6709\\u6216\\u5168\\u65E0\\u7684\\u89E3\\u51B3\\u65B9\\u6848\\u3002\\u4F60\\u53EA\\u9700\\u8981\\u786E\\u4FDD\\u4F60\\u6B63\\u5728\\u4F7F\\u7528\\u76F8\\u540C\\u7684 QueryClient \\u5B9E\\u4F8B\\u3002\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#referencing-the-same-instance-of-query-client-in-your-project\"\n  }, \"QueryClient \\u8BBE\\u7F6E\"), \"\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"# \\u73B0\\u6709\\u7684 useQueryHook {#existing-usequeryhook}\\n  const { data, isPending, isError } = useQuery({\\n    queryKey: ['todos'],\\n    queryFn: fetchTodoList\\n  });\\n\\n# jotai-tanstack-query {#jotai-tanstack-query}\\n  const todosAtom = atomWithQuery(() => ({\\n    queryKey: ['todos'],\\n  }))\\n\\n  const [{ data, isPending, isError }] = useAtom(todosAtom)\\n\\n\")), mdx(\"h3\", null, \"\\u5BFC\\u51FA\\u7684\\u51FD\\u6570 {#exported-functions}\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"atomWithQuery\"), \" \\u5BF9\\u5E94 \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://tanstack.com/query/v5/docs/react/reference/useQuery\"\n  }, \"useQuery\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"atomWithInfiniteQuery\"), \" \\u5BF9\\u5E94 \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://tanstack.com/query/v5/docs/react/reference/useInfiniteQuery\"\n  }, \"useInfiniteQuery\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"atomWithMutation\"), \" \\u5BF9\\u5E94 \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://tanstack.com/query/v5/docs/react/reference/useMutation\"\n  }, \"useMutation\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"atomWithSuspenseQuery\"), \" \\u5BF9\\u5E94 \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://tanstack.com/query/v5/docs/react/reference/useSuspenseQuery\"\n  }, \"useSuspenseQuery\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"atomWithSuspenseInfiniteQuery\"), \" \\u5BF9\\u5E94 \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://tanstack.com/query/v5/docs/react/reference/useSuspenseInfiniteQuery\"\n  }, \"useSuspenseInfiniteQuery\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"atomWithMutationState\"), \" \\u5BF9\\u5E94 \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://tanstack.com/query/v5/docs/react/reference/useMutationState\"\n  }, \"useMutationState\"))), mdx(\"p\", null, \"\\u6240\\u6709\\u51FD\\u6570\\u9075\\u5FAA\\u76F8\\u540C\\u7684\\u7B7E\\u540D\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"const dataAtom = atomWithSomething(getOptions, getQueryClient)\\n\")), mdx(\"p\", null, \"\\u7B2C\\u4E00\\u4E2A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getOptions\"), \" \\u53C2\\u6570\\u662F\\u4E00\\u4E2A\\u8FD4\\u56DE\\u89C2\\u5BDF\\u8005\\u8F93\\u5165\\u7684\\u51FD\\u6570\\u3002\\n\\u7B2C\\u4E8C\\u4E2A\\u53EF\\u9009\\u7684 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getQueryClient\"), \" \\u53C2\\u6570\\u662F\\u4E00\\u4E2A\\u8FD4\\u56DE \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://tanstack.com/query/v5/docs/reference/QueryClient\"\n  }, \"QueryClient\"), \" \\u7684\\u51FD\\u6570\\u3002\"), mdx(\"h3\", null, \"atomWithQuery \\u7684\\u4F7F\\u7528 {#atomwithquery-usage}\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithQuery\"), \" \\u521B\\u5EFA\\u4E86\\u4E00\\u4E2A\\u65B0\\u7684\\u539F\\u5B50\\uFF0C\\u5B83\\u5B9E\\u73B0\\u4E86\\u6765\\u81EA TanStack Query \\u7684\\u6807\\u51C6 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://tanstack.com/query/v5/docs/react/guides/queries\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Query\")), \"\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { atom, useAtom } from 'jotai'\\nimport { atomWithQuery } from 'jotai-tanstack-query'\\n\\nconst idAtom = atom(1)\\nconst userAtom = atomWithQuery((get) => ({\\n  queryKey: ['users', get(idAtom)],\\n  queryFn: async ({ queryKey: [, id] }) => {\\n    const res = await fetch(`https://jsonplaceholder.typicode.com/users/${id}`)\\n    return res.json()\\n  },\\n}))\\n\\nconst UserData = () => {\\n  const [{ data, isPending, isError }] = useAtom(userAtom)\\n\\n  if (isPending) return <div>\\u52A0\\u8F7D\\u4E2D...</div>\\n  if (isError) return <div>\\u9519\\u8BEF</div>\\n\\n  return <div>{JSON.stringify(data)}</div>\\n}\\n\")), mdx(\"h3\", null, \"atomWithInfiniteQuery \\u7684\\u4F7F\\u7528 {#atomwithinfinitequery-usage}\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithInfiniteQuery\"), \" \\u4E0E \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithQuery\"), \" \\u975E\\u5E38\\u76F8\\u4F3C\\uFF0C\\u4F46\\u5B83\\u662F\\u7528\\u4E8E \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InfiniteQuery\"), \"\\uFF0C\\u8FD9\\u662F\\u7528\\u4E8E\\u5206\\u9875\\u6570\\u636E\\u7684\\u3002\\u4F60\\u53EF\\u4EE5\\u5728\\u8FD9\\u91CC\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://tanstack.com/query/v5/docs/guides/infinite-queries\"\n  }, \"\\u9605\\u8BFB\\u66F4\\u591A\\u5173\\u4E8E\\u65E0\\u9650\\u67E5\\u8BE2\\u7684\\u5185\\u5BB9\"), \"\\u3002\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\u6E32\\u67D3\\u53EF\\u4EE5\\u589E\\u91CF \\\"\\u52A0\\u8F7D\\u66F4\\u591A\\\" \\u6570\\u636E\\u5230\\u73B0\\u6709\\u6570\\u636E\\u96C6\\u6216 \\\"\\u65E0\\u9650\\u6EDA\\u52A8\\\" \\u7684\\u5217\\u8868\\u4E5F\\u662F\\u4E00\\u4E2A\\u975E\\u5E38\\u5E38\\u89C1\\u7684 UI \\u6A21\\u5F0F\\u3002React Query \\u652F\\u6301\\u4E00\\u4E2A\\u6709\\u7528\\u7684 useQuery \\u7248\\u672C\\uFF0C\\u53EB\\u505A useInfiniteQuery\\uFF0C\\u7528\\u4E8E\\u67E5\\u8BE2\\u8FD9\\u79CD\\u7C7B\\u578B\\u7684\\u5217\\u8868\\u3002\")), mdx(\"p\", null, \"\\u4E00\\u4E2A\\u6807\\u51C6\\u67E5\\u8BE2\\u539F\\u5B50\\u7684\\u663E\\u8457\\u533A\\u522B\\u662F\\u989D\\u5916\\u7684\\u9009\\u9879 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getNextPageParam\"), \" \\u548C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getPreviousPageParam\"), \"\\uFF0C\\u8FD9\\u662F\\u4F60\\u5C06\\u7528\\u6765\\u6307\\u5BFC\\u67E5\\u8BE2\\u5982\\u4F55\\u83B7\\u53D6\\u4EFB\\u4F55\\u989D\\u5916\\u7684\\u9875\\u9762\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { atom, useAtom } from 'jotai'\\nimport { atomWithInfiniteQuery } from 'jotai-tanstack-query'\\n\\nconst postsAtom = atomWithInfiniteQuery(() => ({\\n  queryKey: ['posts'],\\n  queryFn: async ({ pageParam }) => {\\n    const res = await fetch(`https://jsonplaceholder.typicode.com/posts?_page=${pageParam}`)\\n    return res.json()\\n  },\\n  getNextPageParam: (lastPage, allPages, lastPageParam) => lastPageParam + 1,\\n  initialPageParam: 1,\\n}))\\n\\nconst Posts = () => {\\n  const [{ data, fetchNextPage, isPending, isError, isFetching }] =\\n    useAtom(postsAtom)\\n\\n  if (isPending) return <div>\\u52A0\\u8F7D\\u4E2D...</div>\\n  if (isError) return <div>\\u9519\\u8BEF</div>\\n\\n  return (\\n    <>\\n      {data.pages.map((page, index) => (\\n        <div key={index}>\\n          {page.map((post: any) => (\\n            <div key={post.id}>{post.title}</div>\\n          ))}\\n        </div>\\n      ))}\\n      <button onClick={() => fetchNextPage()}>\\u4E0B\\u4E00\\u9875</button>\\n    </>\\n  )\\n}\\n\\n### atomWithMutation \\u7684\\u4F7F\\u7528 {#atomwithmutation-usage}\\n\\n`atomWithMutation` \\u521B\\u5EFA\\u4E86\\u4E00\\u4E2A\\u65B0\\u7684\\u539F\\u5B50\\uFF0C\\u5B83\\u5B9E\\u73B0\\u4E86\\u6765\\u81EA TanStack Query \\u7684\\u6807\\u51C6 [`Mutation`](https://tanstack.com/query/v5/docs/guides/mutations)\\u3002\\n\\n> \\u4E0E\\u67E5\\u8BE2\\u4E0D\\u540C\\uFF0Cmutations \\u901A\\u5E38\\u7528\\u4E8E\\u521B\\u5EFA/\\u66F4\\u65B0/\\u5220\\u9664\\u6570\\u636E\\u6216\\u6267\\u884C\\u670D\\u52A1\\u5668\\u7AEF\\u6548\\u679C\\u3002\\n\\n```tsx\\nconst postAtom = atomWithMutation(() => ({\\n  mutationKey: ['posts'],\\n  mutationFn: async ({ title }: { title: string }) => {\\n    const res = await fetch(`https://jsonplaceholder.typicode.com/posts`, {\\n      method: 'POST',\\n      body: JSON.stringify({\\n        title,\\n        body: 'body',\\n        userId: 1,\\n      }),\\n      headers: {\\n        'Content-type': 'application/json; charset=UTF-8',\\n      },\\n    })\\n    const data = await res.json()\\n    return data\\n  },\\n}))\\n\\nconst Posts = () => {\\n  const [{ mutate, status }] = useAtom(postAtom)\\n  return (\\n    <div>\\n      <button onClick={() => mutate({ title: 'foo' })}>\\u70B9\\u51FB\\u6211</button>\\n      <pre>{JSON.stringify(status, null, 2)}</pre>\\n    </div>\\n  )\\n}\\n\")), mdx(\"h3\", null, \"atomWithMutationState \\u7684\\u4F7F\\u7528 {#atomwithmutationstate-usage}\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithMutationState\"), \" \\u521B\\u5EFA\\u4E86\\u4E00\\u4E2A\\u65B0\\u7684\\u539F\\u5B50\\uFF0C\\u5B83\\u53EF\\u4EE5\\u8BA9\\u4F60\\u8BBF\\u95EE \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://tanstack.com/query/v5/docs/react/reference/useMutationState\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"MutationCache\")), \" \\u4E2D\\u7684\\u6240\\u6709 mutations\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const mutationStateAtom = atomWithMutationState((get) => ({\\n  filters: {\\n    mutationKey: ['posts'],\\n  },\\n}))\\n\")), mdx(\"h3\", null, \"Suspense {#suspense}\"), mdx(\"p\", null, \"jotai-tanstack-query \\u4E5F\\u53EF\\u4EE5\\u4E0E React \\u7684 Suspense \\u4E00\\u8D77\\u4F7F\\u7528\\u3002\"), mdx(\"h3\", null, \"atomWithSuspenseQuery \\u7684\\u4F7F\\u7528 {#atomwithsuspensequery-usage}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { atom, useAtom } from 'jotai'\\nimport { atomWithSuspenseQuery } from 'jotai-tanstack-query'\\n\\nconst idAtom = atom(1)\\nconst userAtom = atomWithSuspenseQuery((get) => ({\\n  queryKey: ['users', get(idAtom)],\\n  queryFn: async ({ queryKey: [, id] }) => {\\n    const res = await fetch(`https://jsonplaceholder.typicode.com/users/${id}`)\\n    return res.json()\\n  },\\n}))\\n\\nconst UserData = () => {\\n  const [{ data }] = useAtom(userAtom)\\n\\n  return <div>{JSON.stringify(data)}</div>\\n}\\n\")), mdx(\"h3\", null, \"atomWithSuspenseInfiniteQuery \\u7684\\u4F7F\\u7528 {#atomwithsuspenseinfinitequery-usage}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { atom, useAtom } from 'jotai'\\nimport { atomWithSuspenseInfiniteQuery } from 'jotai-tanstack-query'\\n\\nconst postsAtom = atomWithSuspenseInfiniteQuery(() => ({\\n  queryKey: ['posts'],\\n  queryFn: async ({ pageParam }) => {\\n    const res = await fetch(`https://jsonplaceholder.typicode.com/posts?_page=${pageParam}`)\\n    return res.json()\\n  },\\n  getNextPageParam: (lastPage, allPages, lastPageParam) => lastPageParam + 1,\\n  initialPageParam: 1,\\n}))\\n\\nconst Posts = () => {\\n  const [{ data, fetchNextPage, isPending, isError, isFetching }] =\\n    useAtom(postsAtom)\\n\\n  return (\\n    <>\\n      {data.pages.map((page, index) => (\\n        <div key={index}>\\n          {page.map((post: any) => (\\n            <div key={post.id}>{post.title}</div>\\n          ))}\\n        </div>\\n      ))}\\n      <button onClick={() => fetchNextPage()}>\\u4E0B\\u4E00\\u9875</button>\\n    </>\\n  )\\n}\\n\")), mdx(\"h3\", null, \"\\u5728\\u4F60\\u7684\\u9879\\u76EE\\u4E2D\\u5F15\\u7528\\u76F8\\u540C\\u7684 Query Client \\u5B9E\\u4F8B {#referencing-the-same-instance-of-query-client-in-your-project}\"), mdx(\"p\", null, \"\\u4E5F\\u8BB8\\u4F60\\u7684\\u9879\\u76EE\\u4E2D\\u6709\\u4E00\\u4E9B\\u81EA\\u5B9A\\u4E49\\u7684\\u94A9\\u5B50\\uFF0C\\u5B83\\u4EEC\\u4F7F\\u7528 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useQueryClient()\"), \" \\u94A9\\u5B50\\u6765\\u83B7\\u53D6 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"QueryClient\"), \" \\u5BF9\\u8C61\\u5E76\\u8C03\\u7528\\u5176\\u65B9\\u6CD5\\u3002\"), mdx(\"p\", null, \"\\u4E3A\\u4E86\\u786E\\u4FDD\\u4F60\\u5F15\\u7528\\u7684\\u662F\\u76F8\\u540C\\u7684 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"QueryClient\"), \" \\u5BF9\\u8C61\\uFF0C\\u8BF7\\u786E\\u4FDD\\u5728\\u4F60\\u7684\\u9879\\u76EE\\u7684\\u6839\\u90E8\\u5305\\u88F9\\u4E00\\u4E2A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Provider>\"), \"\\uFF0C\\u5E76\\u7528\\u4F60\\u63D0\\u4F9B\\u7ED9 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"QueryClientProvider\"), \" \\u7684\\u76F8\\u540C\\u7684 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"queryClient\"), \" \\u503C\\u521D\\u59CB\\u5316 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"queryClientAtom\"), \"\\u3002\"), mdx(\"p\", null, \"\\u5982\\u679C\\u6CA1\\u6709\\u8FD9\\u4E00\\u6B65\\uFF0C\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useQueryAtom\"), \" \\u5C06\\u5F15\\u7528\\u4E0E\\u4EFB\\u4F55\\u4F7F\\u7528 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useQueryClient()\"), \" \\u94A9\\u5B50\\u83B7\\u53D6 queryClient \\u7684\\u94A9\\u5B50\\u4E0D\\u540C\\u7684 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"QueryClient\"), \"\\u3002\"), mdx(\"p\", null, \"\\u6216\\u8005\\uFF0C\\u4F60\\u53EF\\u4EE5\\u7528 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getQueryClient\"), \" \\u53C2\\u6570\\u6307\\u5B9A\\u4F60\\u7684 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"queryClient\"), \"\\u3002\"), mdx(\"h4\", null, \"\\u793A\\u4F8B {#example}\"), mdx(\"p\", null, \"\\u5728\\u4E0B\\u9762\\u7684\\u793A\\u4F8B\\u4E2D\\uFF0C\\u6211\\u4EEC\\u6709\\u4E00\\u4E2A mutation \\u94A9\\u5B50 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useTodoMutation\"), \" \\u548C\\u4E00\\u4E2A\\u67E5\\u8BE2 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"todosAtom\"), \"\\u3002\"), mdx(\"p\", null, \"\\u6211\\u4EEC\\u5728\\u6839 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<App>\"), \" \\u8282\\u70B9\\u4E2D\\u5305\\u542B\\u4E86\\u4E00\\u4E2A\\u521D\\u59CB\\u5316\\u6B65\\u9AA4\\u3002\"), mdx(\"p\", null, \"\\u5C3D\\u7BA1\\u5B83\\u4EEC\\u5F15\\u7528\\u4E86\\u76F8\\u540C\\u7684\\u67E5\\u8BE2\\u952E\\uFF08\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'todos'\"), \"\\uFF09\\uFF0C\\u4F46\\u5982\\u679C\\u6CA1\\u6709\\u8FDB\\u884C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Provider\"), \" \\u521D\\u59CB\\u5316\\u6B65\\u9AA4\\uFF0C\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useTodoMutation\"), \" \\u4E2D\\u7684 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onSuccess\"), \" \\u65E0\\u6548\\u5316\\u5C06\\u4E0D\\u4F1A\\u89E6\\u53D1\\u3002\"), mdx(\"p\", null, \"\\u8FD9\\u5C06\\u5BFC\\u81F4 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"todosAtom\"), \" \\u663E\\u793A\\u8FC7\\u65F6\\u7684\\u6570\\u636E\\uFF0C\\u56E0\\u4E3A\\u5B83\\u6CA1\\u6709\\u88AB\\u63D0\\u793A\\u91CD\\u65B0\\u83B7\\u53D6\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { Provider } from 'jotai/react'\\nimport { useHydrateAtoms } from 'jotai/react/utils'\\nimport {\\n  useMutation,\\n  useQueryClient,\\n  QueryClient,\\n  QueryClientProvider,\\n} from '@tanstack/react-query'\\nimport { atomWithQuery, queryClientAtom } from 'jotai-tanstack-query'\\n\\nconst queryClient = new QueryClient()\\n\\nconst HydrateAtoms = ({ children }) => {\\n  useHydrateAtoms([[queryClientAtom, queryClient]])\\n  return children\\n}\\n\\nexport const App = () => {\\n  return (\\n    <QueryClientProvider client={queryClient}>\\n      <Provider>\\n        {/*\\n   \\u8FD9\\u4E2A Provider \\u521D\\u59CB\\u5316\\u6B65\\u9AA4\\u662F\\u5FC5\\u9700\\u7684\\uFF0C\\u4EE5\\u4FBF\\u6211\\u4EEC\\u5728 atomWithQuery \\u548C\\u5E94\\u7528\\u7A0B\\u5E8F\\u7684\\u5176\\u4ED6\\u90E8\\u5206\\u90FD\\u5F15\\u7528\\u76F8\\u540C\\u7684\\n   queryClient\\u3002\\u5982\\u679C\\u6CA1\\u6709\\u8FD9\\u4E2A\\u6B65\\u9AA4\\uFF0C\\u6211\\u4EEC\\u7684 useQueryClient() \\u94A9\\u5B50\\u5C06\\u8FD4\\u56DE\\u4E00\\u4E2A\\u4E0D\\u540C\\u7684 QueryClient \\u5BF9\\u8C61\\n    */}\\n        <HydrateAtoms>\\n          <App />\\n        </HydrateAtoms>\\n      </Provider>\\n    </QueryClientProvider>\\n  )\\n}\\n\\nexport const todosAtom = atomWithQuery((get) => {\\n  return {\\n    queryKey: ['todos'],\\n    queryFn: () => fetch('/todos'),\\n  }\\n})\\n\\nexport const useTodoMutation = () => {\\n  const queryClient = useQueryClient()\\n\\n  return useMutation(\\n    async (body: todo) => {\\n      await fetch('/todo', { Method: 'POST', Body: body })\\n    },\\n    {\\n      onSuccess: () => {\\n        void queryClient.invalidateQueries(['todos'])\\n      },\\n      onError,\\n    }\\n  )\\n}\\n\")), mdx(\"h3\", null, \"\\u670D\\u52A1\\u5668\\u7AEF\\u6E32\\u67D3\\uFF08SSR\\uFF09\\u652F\\u6301 {#ssr-support}\"), mdx(\"p\", null, \"\\u6240\\u6709\\u7684\\u539F\\u5B50\\u90FD\\u53EF\\u4EE5\\u5728\\u670D\\u52A1\\u5668\\u7AEF\\u6E32\\u67D3\\u7684\\u5E94\\u7528\\u4E2D\\u4F7F\\u7528\\uFF0C\\u4F8B\\u5982 next.js \\u5E94\\u7528\\u6216 Gatsby \\u5E94\\u7528\\u3002\\u4F60\\u53EF\\u4EE5\\u4F7F\\u7528 React Query \\u652F\\u6301\\u7684\\u4E24\\u79CD\\u9009\\u9879\\uFF0C\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://tanstack.com/query/v5/docs/react/guides/ssr#using-the-hydration-apis\"\n  }, \"hydration\"), \" \\u6216 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://tanstack.com/query/v5/docs/react/guides/ssr#get-started-fast-with-initialdata\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"initialData\")), \"\\u3002\"), mdx(\"h3\", null, \"\\u9519\\u8BEF\\u5904\\u7406 {#error-handling}\"), mdx(\"p\", null, \"\\u83B7\\u53D6\\u9519\\u8BEF\\u5C06\\u4F1A\\u88AB\\u629B\\u51FA\\uFF0C\\u5E76\\u4E14\\u53EF\\u4EE5\\u88AB ErrorBoundary \\u6355\\u83B7\\u3002\\n\\u91CD\\u65B0\\u83B7\\u53D6\\u53EF\\u80FD\\u4F1A\\u4ECE\\u4E34\\u65F6\\u9519\\u8BEF\\u4E2D\\u6062\\u590D\\u3002\"), mdx(\"p\", null, \"\\u67E5\\u770B\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://codesandbox.io/s/4gfp6z\"\n  }, \"\\u5DE5\\u4F5C\\u793A\\u4F8B\"), \"\\u4EE5\\u4E86\\u89E3\\u66F4\\u591A\\u3002\"), mdx(\"h3\", null, \"\\u5F00\\u53D1\\u8005\\u5DE5\\u5177 {#devtools}\"), mdx(\"p\", null, \"\\u4E3A\\u4E86\\u4F7F\\u7528\\u5F00\\u53D1\\u8005\\u5DE5\\u5177\\uFF0C\\u4F60\\u9700\\u8981\\u989D\\u5916\\u5B89\\u88C5\\u5B83\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"npm i @tanstack/react-query-devtools\\n\")), mdx(\"p\", null, \"\\u4F60\\u9700\\u8981\\u505A\\u7684\\u5C31\\u662F\\u5C06 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ReactQueryDevtools />\"), \" \\u653E\\u5728 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<QueryClientProvider />\"), \" \\u5185\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import {\\n  QueryClientProvider,\\n  QueryClient,\\n  QueryCache,\\n} from '@tanstack/react-query'\\nimport { ReactQueryDevtools } from '@tanstack/react-query-devtools'\\nimport { queryClientAtom } from 'jotai-tanstack-query'\\n\\nconst queryClient = new QueryClient({\\n  defaultOptions: {\\n    queries: {\\n      staleTime: Infinity,\\n    },\\n  },\\n})\\n\\nconst HydrateAtoms = ({ children }) => {\\n  useHydrateAtoms([[queryClientAtom, queryClient]])\\n  return children\\n}\\n\\nexport const App = () => {\\n  return (\\n    <QueryClientProvider client={queryClient}>\\n      <Provider>\\n        <HydrateAtoms>\\n          <App />\\n        </HydrateAtoms>\\n      </Provider>\\n      <ReactQueryDevtools />\\n    </QueryClientProvider>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"\\u8FC1\\u79FB\\u5230 v0.8.0 {#migrate-to-v0.8.0}\"), mdx(\"h3\", null, \"\\u539F\\u5B50\\u7B7E\\u540D\\u7684\\u53D8\\u5316 {#change-in-atom-signature}\"), mdx(\"p\", null, \"\\u6240\\u6709\\u7684\\u539F\\u5B50\\u7B7E\\u540D\\u90FD\\u5DF2\\u7ECF\\u6539\\u53D8\\uFF0C\\u4EE5\\u4E0E TanStack Query \\u66F4\\u52A0\\u4E00\\u81F4\\u3002\\nv0.8.0 \\u53EA\\u8FD4\\u56DE\\u4E00\\u4E2A\\u539F\\u5B50\\uFF0C\\u800C\\u4E0D\\u662F\\u4E00\\u5BF9\\u539F\\u5B50\\uFF0C\\u56E0\\u6B64\\u4ECE \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomsWithSomething\"), \" \\u6539\\u540D\\u4E3A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithSomething\"), \"\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\"\n  }, \"\\n- const [dataAtom, statusAtom] = atomsWithSomething(getOptions, getQueryClient)\\n+ const dataAtom = atomWithSomething(getOptions, getQueryClient)\\n\\n\")), mdx(\"h3\", null, \"\\u7B80\\u5316\\u7684\\u8FD4\\u56DE\\u7ED3\\u6784 {#simplified-return-structure}\"), mdx(\"p\", null, \"\\u5728 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jotai-tanstack-query\"), \" \\u7684\\u524D\\u4E00\\u4E2A\\u7248\\u672C\\u4E2D\\uFF0C\\u67E5\\u8BE2\\u539F\\u5B50 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomsWithQuery\"), \" \\u548C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomsWithInfiniteQuery\"), \" \\u8FD4\\u56DE\\u4E86\\u4E00\\u5BF9\\u539F\\u5B50\\uFF1A\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[dataAtom, statusAtom]\"), \"\\u3002\\u8FD9\\u79CD\\u8BBE\\u8BA1\\u5C06\\u6570\\u636E\\u53CA\\u5176\\u72B6\\u6001\\u5206\\u6210\\u4E86\\u4E24\\u4E2A\\u4E0D\\u540C\\u7684\\u539F\\u5B50\\u3002\"), mdx(\"h4\", null, \"atomWithQuery \\u548C atomWithInfiniteQuery {#atomwithquery-and-atomwithinfinitequery}\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dataAtom\"), \" \\u88AB\\u7528\\u6765\\u8BBF\\u95EE\\u5B9E\\u9645\\u7684\\u6570\\u636E (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TData\"), \")\\u3002\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"statusAtom\"), \" \\u63D0\\u4F9B\\u4E86\\u72B6\\u6001\\u5BF9\\u8C61 (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"QueryObserverResult<TData, TError>\"), \")\\uFF0C\\u5176\\u4E2D\\u5305\\u62EC\\u4E86\\u989D\\u5916\\u7684\\u5C5E\\u6027\\uFF0C\\u5982 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"isPending\"), \"\\uFF0C\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"isError\"), \" \\u7B49\\u3002\")), mdx(\"p\", null, \"\\u5728 v0.8.0 \\u4E2D\\uFF0C\\u5B83\\u4EEC\\u88AB \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithQuery\"), \" \\u548C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithInfiniteQuery\"), \" \\u66FF\\u4EE3\\uFF0C\\u53EA\\u8FD4\\u56DE\\u4E00\\u4E2A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dataAtom\"), \"\\u3002\\u8FD9\\u4E2A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dataAtom\"), \" \\u73B0\\u5728\\u76F4\\u63A5\\u63D0\\u4F9B\\u4E86 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"QueryObserverResult<TData, TError>\"), \"\\uFF0C\\u4F7F\\u5176\\u4E0E Tanstack Query \\u7684\\u7ED1\\u5B9A\\u884C\\u4E3A\\u66F4\\u52A0\\u63A5\\u8FD1\\u3002\"), mdx(\"p\", null, \"\\u8981\\u8FC1\\u79FB\\u5230\\u65B0\\u7248\\u672C\\uFF0C\\u5C06\\u5206\\u5F00\\u7684 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dataAtom\"), \" \\u548C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"statusAtom\"), \" \\u7684\\u4F7F\\u7528\\u66FF\\u6362\\u4E3A\\u73B0\\u5728\\u5305\\u542B\\u6570\\u636E\\u548C\\u72B6\\u6001\\u4FE1\\u606F\\u7684\\u7EDF\\u4E00\\u7684 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dataAtom\"), \"\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\"\n  }, \"- const [dataAtom, statusAtom] = atomsWithQuery(/* ... */);\\n- const [data] = useAtom(dataAtom);\\n- const [status] = useAtom(statusAtom);\\n\\n+ const dataAtom = atomWithQuery(/* ... */);\\n+ const [{ data, isPending, isError }] = useAtom(dataAtom);\\n\")), mdx(\"h4\", null, \"atomWithMutation {#atomwithmutation}\"), mdx(\"p\", null, \"\\u4E0E \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomsWithQuery\"), \" \\u548C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomsWithInfiniteQuery\"), \" \\u7C7B\\u4F3C\\uFF0C\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithMutation\"), \" \\u4E5F\\u8FD4\\u56DE\\u4E00\\u4E2A\\u539F\\u5B50\\u800C\\u4E0D\\u662F\\u4E00\\u5BF9\\u539F\\u5B50\\u3002\\u539F\\u5B50\\u503C\\u7684\\u8FD4\\u56DE\\u7C7B\\u578B\\u662F \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MutationObserverResult<TData, TError, TVariables, TContext>\"), \"\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\"\n  }, \"\\n- const [, postAtom] = atomsWithMutation(/* ... */);\\n- const [post, mutate] = useAtom(postAtom); // \\u4ECE post \\u8BBF\\u95EE mutation \\u72B6\\u6001\\uFF1B\\u5E76\\u4F7F\\u7528 mutate() \\u6267\\u884C mutation\\n\\n+ const postAtom = atomWithMutation(/* ... */);\\n+ const [{ data, error, mutate }] = useAtom(postAtom); // \\u4ECE\\u540C\\u4E00\\u4E2A\\u539F\\u5B50\\u8BBF\\u95EE mutation \\u7ED3\\u679C\\u548C mutate \\u65B9\\u6CD5\\n\\n\")), mdx(\"h3\", null, \"\\u793A\\u4F8B {#examples}\"), mdx(\"h4\", null, \"\\u57FA\\u7840\\u6F14\\u793A {#basic-demo}\"), mdx(CodeSandbox, {\n    id: \"jm8mf7\",\n    mdxType: \"CodeSandbox\"\n  }), mdx(\"h4\", null, \"\\u5F00\\u53D1\\u8005\\u5DE5\\u5177\\u6F14\\u793A {#devtools-demo}\"), mdx(CodeSandbox, {\n    id: \"zlp3pj\",\n    mdxType: \"CodeSandbox\"\n  }), mdx(\"h4\", null, \"\\u9ED1\\u5BA2\\u65B0\\u95FB {#hackernews}\"), mdx(CodeSandbox, {\n    id: \"8v4mc4\",\n    mdxType: \"CodeSandbox\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"2550bfa6-3e65-552a-999b-77c5588bea9d","slug":"extensions/query","__params":{"slug":"extensions"}}},"staticQueryHashes":["171421096","930225796"]}