{"componentChunkName":"component---src-pages-docs-mdx-slug-js","path":"/docs/extensions/urql","result":{"data":{"mdx":{"slug":"extensions/urql","frontmatter":{"title":"URQL","description":"This doc describes URQL extension."},"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {\n  \"title\": \"URQL\",\n  \"description\": \"This doc describes URQL extension.\",\n  \"nav\": 4.03,\n  \"keywords\": \"urql\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\nconst CodeSandbox = makeShortcode(\"CodeSandbox\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://formidable.com/open-source/urql/\"\n  }, \"urql\"), \" \\u63D0\\u4F9B\\u4E86\\u4E00\\u4E2A\\u7528\\u4E8EGraphQL\\u67E5\\u8BE2\\u3001\\u7F13\\u5B58\\u548C\\u72B6\\u6001\\u7BA1\\u7406\\u7684\\u5DE5\\u5177\\u5305\\u3002\"), mdx(\"p\", null, \"\\u6765\\u81EA \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://formidable.com/open-source/urql/docs/\"\n  }, \"\\u6982\\u89C8\\u6587\\u6863\"), \"\\uFF1A\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"urql \\u662F\\u4E00\\u4E2A\\u9AD8\\u5EA6\\u53EF\\u5B9A\\u5236\\u548C\\u591A\\u529F\\u80FD\\u7684 GraphQL \\u5BA2\\u6237\\u7AEF\\uFF0C\\u4F60\\u53EF\\u4EE5\\u968F\\u7740\\u6210\\u957F\\u6DFB\\u52A0\\u8BF8\\u5982\\u89C4\\u8303\\u5316\\u7F13\\u5B58\\u7B49\\u529F\\u80FD\\u3002\\u5B83\\u65E8\\u5728\\u5BF9 GraphQL \\u7684\\u65B0\\u624B\\u6613\\u4E8E\\u4F7F\\u7528\\uFF0C\\u540C\\u65F6\\u53EF\\u6269\\u5C55\\uFF0C\\u4EE5\\u652F\\u6301\\u52A8\\u6001\\u7684\\u5355\\u5E94\\u7528\\u7A0B\\u5E8F\\u548C\\u9AD8\\u5EA6\\u5B9A\\u5236\\u7684 GraphQL \\u57FA\\u7840\\u8BBE\\u65BD\\u3002\\u7B80\\u800C\\u8A00\\u4E4B\\uFF0Curql \\u4F18\\u5148\\u8003\\u8651\\u6613\\u7528\\u6027\\u548C\\u9002\\u5E94\\u6027\\u3002\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/jotaijs/jotai-urql\"\n  }, \"jotai-urql\"), \" \\u662F URQL \\u7684 Jotai \\u6269\\u5C55\\u5E93\\u3002\\u5B83\\u63D0\\u4F9B\\u4E86\\u4E00\\u4E2A\\u6574\\u5408\\u4E86 URQL \\u7684\\u6240\\u6709 GraphQL \\u529F\\u80FD\\u7684\\u63A5\\u53E3\\uFF0C\\u5141\\u8BB8\\u4F60\\u5728\\u73B0\\u6709\\u7684 Jotai \\u72B6\\u6001\\u65C1\\u8FB9\\u5229\\u7528\\u8FD9\\u4E9B\\u529F\\u80FD\\u3002\"), mdx(\"h3\", null, \"\\u5B89\\u88C5 {#install}\"), mdx(\"p\", null, \"\\u4F60\\u9700\\u8981\\u5B89\\u88C5 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jotai-urql\"), \"\\uFF0C\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@urql/core\"), \" \\u548C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"wonka\"), \" \\u6765\\u4F7F\\u7528\\u8FD9\\u4E2A\\u6269\\u5C55\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"npm i jotai-urql @urql/core wonka\\n\")), mdx(\"h3\", null, \"\\u5BFC\\u51FA\\u7684\\u51FD\\u6570 {#exported-functions}\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"atomWithQuery\"), \" \\u5BF9\\u5E94 \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://formidable.com/open-source/urql/docs/api/core/#clientquery\"\n  }, \"client.query\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"atomWithMutation\"), \" \\u5BF9\\u5E94 \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://formidable.com/open-source/urql/docs/api/core/#clientmutation\"\n  }, \"client.mutation\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"atomWithSubscription\"), \" \\u5BF9\\u5E94 \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://formidable.com/open-source/urql/docs/api/core/#clientsubscription\"\n  }, \"client.subscription\"))), mdx(\"h3\", null, \"\\u57FA\\u672C\\u4F7F\\u7528 {#basic-usage}\"), mdx(\"h4\", null, \"\\u67E5\\u8BE2: {#query:}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useAtom } from 'jotai'\\n\\nconst countQueryAtom = atomWithQuery<{ count: number }>({\\n  query: 'query Count { count }',\\n  getClient: () => client, // \\u5982\\u679C\\u5168\\u5C40\\u4F7F\\u7528 `useRehydrateAtom([[clientAtom, client]])`\\uFF0C\\u8FD9\\u4E2A\\u9009\\u9879\\u662F\\u53EF\\u9009\\u7684\\n})\\n\\nconst Counter = () => {\\n  // \\u5C06\\u6302\\u8D77\\uFF0C\\u76F4\\u5230\\u7B2C\\u4E00\\u4E2A\\u64CD\\u4F5C\\u7ED3\\u679C\\u88AB\\u89E3\\u6790\\u3002\\u65E0\\u8BBA\\u662F\\u9519\\u8BEF\\uFF0C\\u90E8\\u5206\\u6570\\u636E\\uFF0C\\u8FD8\\u662F\\u6570\\u636E\\n  const [operationResult, reexecute] = useAtom(countQueryAtom)\\n\\n  if (operationResult.error) {\\n    // \\u8FD9\\u5E94\\u8BE5\\u5728\\u4E0A\\u9762\\u7684\\u7236 ErrorBoundary \\u4E2D\\u5904\\u7406\\n    throw operationResult.error\\n  }\\n\\n  // \\u5728\\u8FD9\\u4E2A\\u70B9\\u4E0A\\uFF0C\\u4F60\\u5FC5\\u987B\\u4F7F\\u7528\\u53EF\\u9009\\u94FE\\uFF0C\\u56E0\\u4E3A\\u6570\\u636E\\u53EF\\u80FD\\u5728\\u8FD9\\u4E2A\\u70B9\\u4E0A\\u662F\\u672A\\u5B9A\\u4E49\\u7684\\uFF08\\u53EA\\u5728\\u51FA\\u9519\\u7684\\u60C5\\u51B5\\u4E0B\\uFF09\\n  return <>{operationResult.data?.count}</>\\n}\\n\")), mdx(\"h4\", null, \"\\u53D8\\u66F4: {#mutation:}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useAtom } from 'jotai'\\n\\nconst incrementMutationAtom = atomWithMutation<{ increment: number }>({\\n  query: 'mutation Increment { increment }',\\n})\\n\\nconst Counter = () => {\\n  const [operationResult, executeMutation] = useAtom(incrementMutationAtom)\\n  return (\\n    <div>\\n      <button\\n        onClick={() =>\\n          executeMutation().then((it) => console.log(it.data?.increment))\\n        }\\n      >\\n        \\u589E\\u52A0\\n      </button>\\n      <div>{operationResult.data?.increment}</div>\\n    </div>\\n  )\\n}\\n\")), mdx(\"h3\", null, \"\\u7B80\\u5316\\u7684\\u4F20\\u9012\\u7ED9\\u51FD\\u6570\\u7684\\u9009\\u9879\\u7C7B\\u578B {#simplified-type-of-options-passed-to-functions}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"type AtomWithQueryOptions<\\n  Data = unknown,\\n  Variables extends AnyVariables = AnyVariables,\\n> = {\\n  // \\u652F\\u6301\\u5B57\\u7B26\\u4E32\\u67E5\\u8BE2\\uFF0C\\u7C7B\\u578B\\u5316\\u6587\\u6863\\u8282\\u70B9\\uFF0C\\u6587\\u6863\\u8282\\u70B9\\u7B49\\u3002\\n  query: DocumentInput<Data, Variables>\\n  // \\u5C06\\u6839\\u636E\\u6CDB\\u578B/\\u7C7B\\u578B\\u5316\\u6587\\u6863\\u8282\\u70B9\\u7C7B\\u578B\\u52A8\\u6001\\u5F3A\\u5236\\u6267\\u884C\\u3002\\n  getVariables?: (get: Getter) => Variables\\n  getContext?: (get: Getter) => Partial<OperationContext>\\n  getPause?: (get: Getter) => boolean\\n  getClient?: (get: Getter) => Client\\n}\\n\\ntype AtomWithMutationOptions<\\n  Data = unknown,\\n  Variables extends AnyVariables = AnyVariables,\\n> = {\\n  query: DocumentInput<Data, Variables>\\n  getClient?: (get: Getter) => Client\\n}\\n\\n// Subscription \\u7C7B\\u578B\\u4E0E AtomWithQueryOptions \\u76F8\\u540C\\n\")), mdx(\"h3\", null, \"\\u7981\\u7528 suspense {#disable-suspense}\"), mdx(\"p\", null, \"\\u63A8\\u8350\\u4F7F\\u7528 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"import { loadable } from \\\"jotai/utils\\\"\"), \"\\uFF0C\\u56E0\\u4E3A\\u5B83\\u66F4\\u7A33\\u5B9A\\u3002\\u4F46\\u662F\\uFF0C\\u5982\\u679C\\u4F60\\u4ECD\\u7136\\u60F3\\u4F7F\\u7528\\uFF0C\\u4EE5\\u4E0B\\u662F\\u64CD\\u4F5C\\u65B9\\u6CD5\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { suspenseAtom } from 'jotai-urql'\\n\\nexport const App = () => {\\n  // \\u6211\\u4EEC\\u4E3A\\u6574\\u4E2A\\u5E94\\u7528\\u7981\\u7528 suspense\\n  useHydrateAtoms([[suspenseAtom, false]])\\n  return <Counter />\\n}\\n\")), mdx(\"h3\", null, \"\\u6709\\u7528\\u7684\\u8F85\\u52A9 hook {#useful-helper-hook}\"), mdx(\"p\", null, \"\\u8FD9\\u662F\\u4E00\\u4E2A\\u8F85\\u52A9 hook\\uFF0C\\u7528\\u4E8E\\u5904\\u7406\\u4E00\\u4E2A\\u7F55\\u89C1\\u7684\\u89D2\\u843D\\u6848\\u4F8B\\uFF0C\\u5E76\\u4F7F\\u8FD9\\u4E9B\\u7ED1\\u5B9A\\u7684\\u4F7F\\u7528\\u7C7B\\u4F3C\\u4E8E \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@tanstack/react-query\"), \" \\u7684\\u9ED8\\u8BA4\\u884C\\u4E3A\\uFF0C\\u5176\\u4E2D\\u9519\\u8BEF\\u88AB\\u89C6\\u4E3A\\u9519\\u8BEF\\uFF08\\u5728 Promise reject \\u7684\\u60C5\\u51B5\\u4E0B\\uFF09\\u5E76\\u4E14\\u4E3B\\u8981\\u5728\\u9644\\u8FD1\\u7684 ErrorBoundaries \\u4E2D\\u5904\\u7406\\u3002\\u53EA\\u5BF9\\u6302\\u8D77\\u7248\\u672C\\u6709\\u6548\\u3002\"), mdx(\"h4\", null, \"useQueryAtomData {#usequeryatomdata}\"), mdx(\"p\", null, \"\\u5728\\u89E3\\u6790\\u540E\\u6574\\u9F50\\u5730\\u8FD4\\u56DE \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data\"), \" + \\u5904\\u7406\\u6240\\u6709\\u7684\\u9519\\u8BEF\\u629B\\u51FA/\\u91CD\\u65B0\\u6267\\u884C\\u6848\\u4F8B/\\u89D2\\u843D\\u6848\\u4F8B\\u3002\\n\\u6CE8\\u610F\\u7C7B\\u578B\\u88AB\\u8986\\u76D6\\uFF0C\\u6240\\u4EE5 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data\"), \" \\u6C38\\u8FDC\\u4E0D\\u4F1A\\u662F \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"undefined\"), \" \\u6216 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \"\\uFF08\\u9664\\u975E\\u8FD9\\u662F\\u67E5\\u8BE2\\u672C\\u8EAB\\u7684\\u9884\\u671F\\u8FD4\\u56DE\\u7C7B\\u578B\\uFF09\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import type { AnyVariables, OperationResult } from '@urql/core'\\nimport { useAtom } from 'jotai'\\nimport type { AtomWithQuery } from 'jotai-urql'\\n\\nexport const useQueryAtomData = <\\n  Data = unknown,\\n  Variables extends AnyVariables = AnyVariables,\\n>(\\n  queryAtom: AtomWithQuery<Data, Variables>,\\n) => {\\n  const [opResult, dispatch] = useAtom(queryAtom)\\n\\n  if (opResult.error && opResult.stale) {\\n    use(\\n      // \\u5728\\u8FD9\\u91CC\\u6211\\u4EEC\\u6302\\u8D77\\u6811\\u3002\\u8FD9\\u53EA\\u4F1A\\u5728\\u4F60\\u5728 Error Boundary \\u91CD\\u8BD5\\u903B\\u8F91\\u4E2D\\u4F7F\\u7528 `network-only` \\u8FDB\\u884C\\u5237\\u65B0\\u7684\\u60C5\\u51B5\\u4E0B\\u89E6\\u53D1\\uFF0C\\u5728\\u8FD9\\u79CD\\u60C5\\u51B5\\u4E0B\\u6811\\u4E0D\\u4F1A\\u6302\\u8D77\\n      // \\u53EF\\u80FD\\u5BFC\\u81F4 \\\"\\u629B\\u51FA - \\u5728\\u8FB9\\u754C\\u91CD\\u8BD5 - \\u629B\\u51FA - \\u5728\\u8FB9\\u754C\\u91CD\\u8BD5\\\" \\u7684\\u5FAA\\u73AF\\u3002\\n      // \\uFF08\\u4EC5\\u5728 Jotai URQL \\u7ED1\\u5B9A\\u7684\\u60C5\\u51B5\\u4E0B\\uFF09\\u3002\\n      // eslint-disable-next-line promise/avoid-new\\n      new Promise((resolve) => {\\n        setTimeout(resolve, 10000) // \\u8FD9\\u4E2A\\u8D85\\u65F6\\u65F6\\u95F4\\u5C06\\u5BFC\\u81F4\\u8FD9\\u4E2A\\u7EC4\\u4EF6\\u6302\\u8D77\\uFF0C\\u76F4\\u5230\\n        // \\u65B0\\u7684\\u64CD\\u4F5C\\u7ED3\\u679C\\u6765\\u4E34\\u300210\\u79D2\\u540E\\uFF0C\\u5B83\\u5C06\\u7B80\\u5355\\u5730\\u5C1D\\u8BD5\\u6E32\\u67D3\\u7EC4\\u4EF6\\u672C\\u8EAB\\u5E76\\u518D\\u6B21\\u6302\\u8D77\\n        // \\u5728\\u4E00\\u4E2A\\u65E0\\u5C3D\\u7684\\u5FAA\\u73AF\\u4E2D\\n      }),\\n    )\\n  }\\n\\n  if (opResult.error) {\\n    throw opResult.error\\n  }\\n\\n  if (!opResult.data) {\\n    throw Error(\\n      '\\u67E5\\u8BE2\\u6570\\u636E\\u672A\\u5B9A\\u4E49\\u3002\\u53EF\\u80FD\\u4F60\\u6682\\u505C\\u4E86\\u67E5\\u8BE2\\uFF1F\\u5728\\u8FD9\\u79CD\\u60C5\\u51B5\\u4E0B\\u4F7F\\u7528 `useQueryAtom`\\u3002',\\n    )\\n  }\\n  return [opResult.data, dispatch, opResult] as [\\n    Exclude<typeof opResult.data, undefined>,\\n    typeof dispatch,\\n    typeof opResult,\\n  ]\\n}\\n\\n// \\u5F53 promise \\u89E3\\u6790\\u65F6\\u6302\\u8D77\\u6811\\uFF08\\u5728 React \\u7684\\u4E0B\\u4E00\\u4E2A\\u7248\\u672C\\u4E2D\\u4E0D\\u9700\\u8981\\uFF09\\nfunction use(promise: Promise<any> | any) {\\n  if (promise.status === 'fulfilled') {\\n    return promise.value\\n  }\\n  if (promise.status === 'rejected') {\\n    throw promise.reason\\n  } else if (promise.status === 'pending') {\\n    throw promise\\n  } else {\\n    promise.status = 'pending'\\n    // eslint-disable-next-line promise/catch-or-return\\n    ;(promise as Promise<any>).then(\\n      (result: any) => {\\n        promise.status = 'fulfilled'\\n        promise.value = result\\n      },\\n      (reason: any) => {\\n        promise.status = 'rejected'\\n        promise.reason = reason\\n      },\\n    )\\n    throw promise\\n  }\\n}\\n\")), mdx(\"h4\", null, \"\\u57FA\\u672C\\u6F14\\u793A {#basic-demo}\"), mdx(CodeSandbox, {\n    id: \"5rwunq\",\n    mdxType: \"CodeSandbox\"\n  }), mdx(\"h3\", null, \"\\u4E3A atoms \\u548C urql provider \\u5F15\\u7528\\u540C\\u4E00\\u5BA2\\u6237\\u7AEF\\u5B9E\\u4F8B {#refferencing-the-same-instance-of-the-client-for-both-atoms-and-urql-provider}\"), mdx(\"p\", null, \"\\u4E3A\\u4E86\\u786E\\u4FDD\\u4F60\\u5F15\\u7528\\u7684\\u662F\\u540C\\u4E00\\u4E2A urqlClient \\u5BF9\\u8C61\\uFF0C\\u8BF7\\u786E\\u4FDD\\u5C06\\u4F60\\u7684\\u9879\\u76EE\\u7684\\u6839\\u90E8\\u5206\\u5305\\u88F9\\u5728 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Provider>\"), \" \\u4E2D\\uFF0C\\u5E76\\u4F7F\\u7528\\u4F60\\u63D0\\u4F9B\\u7ED9 UrqlProvider \\u7684\\u76F8\\u540C urqlClient \\u503C\\u521D\\u59CB\\u5316 clientAtom\\u3002\"), mdx(\"p\", null, \"\\u5982\\u679C\\u6CA1\\u6709\\u8FD9\\u4E00\\u6B65\\uFF0C\\u4F60\\u53EF\\u80FD\\u4F1A\\u5728\\u6BCF\\u6B21\\u4F7F\\u7528 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithQuery\"), \" \\u65F6\\u90FD\\u9700\\u8981\\u6307\\u5B9A\\u5BA2\\u6237\\u7AEF\\u3002\\u73B0\\u5728\\u4F60\\u53EF\\u4EE5\\u5FFD\\u7565\\u53EF\\u9009\\u7684 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getClient\"), \" \\u53C2\\u6570\\uFF0C\\u5B83\\u5C06\\u4ECE\\u4E0A\\u4E0B\\u6587\\u4E2D\\u4F7F\\u7528\\u5BA2\\u6237\\u7AEF\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { Suspense } from 'react'\\nimport { Provider } from 'jotai/react'\\nimport { useHydrateAtoms } from 'jotai/react/utils'\\nimport { clientAtom } from 'jotai-urql'\\n\\nimport {\\n  createClient,\\n  cacheExchange,\\n  fetchExchange,\\n  Provider as UrqlProvider,\\n} from 'urql'\\n\\nconst urqlClient = createClient({\\n  url: 'https://countries.trevorblades.com/',\\n  exchanges: [cacheExchange, fetchExchange],\\n  fetchOptions: () => {\\n    return { headers: {} }\\n  },\\n})\\n\\nconst HydrateAtoms = ({ children }) => {\\n  useHydrateAtoms([[clientAtom, urqlClient]])\\n  return children\\n}\\n\\nexport default function MyApp({ Component, pageProps }) {\\n  return (\\n    <UrqlProvider value={urqlClient}>\\n      <Provider>\\n        <HydrateAtoms>\\n          <Suspense fallback=\\\"Loading...\\\">\\n            <Component {...pageProps} />\\n          </Suspense>\\n        </HydrateAtoms>\\n      </Provider>\\n    </UrqlProvider>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"1fbda404-1b54-571a-87f8-ab747030a1e2","slug":"extensions/urql","__params":{"slug":"extensions"}}},"staticQueryHashes":["171421096","930225796"]}