{"componentChunkName":"component---src-pages-docs-mdx-slug-js","path":"/docs/recipes/atom-with-broadcast","result":{"data":{"mdx":{"slug":"recipes/atom-with-broadcast","frontmatter":{"title":"atomWithBroadcast","description":null},"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {\n  \"title\": \"atomWithBroadcast\",\n  \"nav\": 8.09,\n  \"keywords\": \"creators,broadcast\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\nconst CodeSandbox = makeShortcode(\"CodeSandbox\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithBroadcast\"), \"\\u521B\\u5EFA\\u4E00\\u4E2A\\u539F\\u5B50\\u3002\\u8FD9\\u4E2A\\u539F\\u5B50\\u5C06\\u5728\\u6D4F\\u89C8\\u5668\\u7684\\u6807\\u7B7E\\u9875\\u548C\\u6846\\u67B6\\u4E4B\\u95F4\\u5171\\u4EAB\\uFF0C\\u7C7B\\u4F3C\\u4E8E\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithStorage\"), \"\\uFF0C\\u4F46\\u662F\\u6709\\u521D\\u59CB\\u5316\\u7684\\u9650\\u5236\\u3002\")), mdx(\"p\", null, \"\\u8FD9\\u5728\\u4F60\\u5E0C\\u671B\\u72B6\\u6001\\u4E4B\\u95F4\\u76F8\\u4E92\\u4F5C\\u7528\\uFF0C\\u800C\\u4E0D\\u4F7F\\u7528localStorage\\u7684\\u65F6\\u5019\\u4F1A\\u5F88\\u6709\\u7528\\u3002\\n\\u901A\\u8FC7\\u4F7F\\u7528BroadcastChannel API\\uFF0C\\u4F60\\u53EF\\u4EE5\\u5728\\u540C\\u4E00\\u6E90\\u4E0A\\u7684\\u7A97\\u53E3\\u3001\\u6807\\u7B7E\\u3001\\u6846\\u67B6\\u3001\\u7EC4\\u4EF6\\u6216iframe\\uFF0C\\u4EE5\\u53CA\\u5DE5\\u4F5C\\u5668\\u4E4B\\u95F4\\u542F\\u7528\\u57FA\\u672C\\u7684\\u901A\\u4FE1\\u3002\\n\\u6839\\u636EMDN\\u6587\\u6863\\uFF0CBroadcastChannel\\u5728\\u521D\\u59CB\\u5316\\u671F\\u95F4\\u4E0D\\u652F\\u6301\\u63A5\\u6536\\u6D88\\u606F\\uFF0C\\u4F46\\u662F\\u5982\\u679C\\u4F60\\u60F3\\u652F\\u6301\\u90A3\\u4E2A\\u529F\\u80FD\\uFF0C\\u4F60\\u53EF\\u80FD\\u9700\\u8981\\u5411atomWithBroadcast\\u6DFB\\u52A0\\u989D\\u5916\\u7684\\u9009\\u9879\\uFF0C\\u6BD4\\u5982\\u672C\\u5730\\u5B58\\u50A8\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { atom } from 'jotai'\\n\\nexport function atomWithBroadcast<Value>(key: string, initialValue: Value) {\\n  const baseAtom = atom(initialValue)\\n  const listeners = new Set<(event: MessageEvent<any>) => void>()\\n  const channel = new BroadcastChannel(key)\\n  channel.onmessage = (event) => {\\n    listeners.forEach((l) => l(event))\\n  }\\n\\n  const broadcastAtom = atom<Value, { isEvent: boolean; value: Value }>(\\n    (get) => get(baseAtom),\\n    (get, set, update) => {\\n      set(baseAtom, update.value)\\n\\n      if (!update.isEvent) {\\n        channel.postMessage(get(baseAtom))\\n      }\\n    },\\n  )\\n  broadcastAtom.onMount = (setAtom) => {\\n    const listener = (event: MessageEvent<any>) => {\\n      setAtom({ isEvent: true, value: event.data })\\n    }\\n    listeners.add(listener)\\n    return () => {\\n      listeners.delete(listener)\\n    }\\n  }\\n  const returnedAtom = atom<Value, Value>(\\n    (get) => get(broadcastAtom),\\n    (get, set, update) => {\\n      set(broadcastAtom, { isEvent: false, value: update })\\n    },\\n  )\\n  return returnedAtom\\n}\\nconst broadAtom = atomWithBroadcast('count', 0)\\n\\nconst ListOfThings = () => {\\n  const [count, setCount] = useAtom(broadAtom)\\n\\n  return (\\n    <div>\\n      {count}\\n      <button onClick={() => setCount(count + 1)}>+1</button>\\n    </div>\\n  )\\n}\\n\")), mdx(CodeSandbox, {\n    id: \"ugkzm0\",\n    mdxType: \"CodeSandbox\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"1e04341b-b041-5a19-b453-5ff10ce14523","slug":"recipes/atom-with-broadcast","__params":{"slug":"recipes"}}},"staticQueryHashes":["171421096","930225796"]}