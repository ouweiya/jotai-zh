{"componentChunkName":"component---src-pages-docs-mdx-slug-js","path":"/docs/recipes/use-atom-effect","result":{"data":{"mdx":{"slug":"recipes/use-atom-effect","frontmatter":{"title":"useAtomEffect","description":null},"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {\n  \"title\": \"useAtomEffect\",\n  \"nav\": 8.03,\n  \"keywords\": \"effect, atom effect, side effect, side-effect, sideeffect, hook, useAtomEffect\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useAtomEffect\"), \" \\u4F7F\\u7528 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../extensions/effect.mdx\"\n  }, \"atomEffect\"), \" \\u6839\\u636E atoms \\u6216 props \\u7684\\u53D8\\u5316\\u8FD0\\u884C\\u526F\\u4F5C\\u7528\\u3002\")), mdx(\"p\", null, \"\\u5F53\\u5B83\\u4F9D\\u8D56\\u7684 atoms \\u53D1\\u751F\\u53D8\\u5316\\u6216 effectFn \\u672C\\u8EAB\\u53D1\\u751F\\u53D8\\u5316\\u65F6\\uFF0CeffectFn \\u4F1A\\u91CD\\u65B0\\u8FD0\\u884C\\u3002\\u5982\\u679C effectFn \\u662F\\u5728\\u7EC4\\u4EF6\\u4E2D\\u5B9A\\u4E49\\u7684\\u51FD\\u6570\\uFF0C\\u8BF7\\u786E\\u4FDD\\u5BF9\\u5176\\u8FDB\\u884C\\u8BB0\\u5FC6\\u5316\\u3002\"), mdx(\"p\", null, \"\\u26A0\\uFE0F \\u6CE8\\u610F\\uFF1A\\u603B\\u662F\\u4F18\\u5148\\u4F7F\\u7528 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/alexreardon/use-memo-one\"\n  }, \"\\u7A33\\u5B9A\\u7248\\u672C\\u7684 useMemo \\u548C useCallback\"), \" \\u6765\\u907F\\u514D\\u989D\\u5916\\u7684 atomEffect \\u91CD\\u65B0\\u8BA1\\u7B97\\u3002\\u4F60\\u53EF\\u4EE5\\u4F9D\\u8D56 useMemo \\u4F5C\\u4E3A\\u6027\\u80FD\\u4F18\\u5316\\uFF0C\\u4F46\\u4E0D\\u80FD\\u4F5C\\u4E3A\\u8BED\\u4E49\\u4FDD\\u8BC1\\u3002\\u5728\\u672A\\u6765\\uFF0CReact \\u53EF\\u80FD\\u4F1A\\u9009\\u62E9\\u201C\\u5FD8\\u8BB0\\u201D\\u4E00\\u4E9B\\u4E4B\\u524D\\u8BB0\\u5FC6\\u5316\\u7684\\u503C\\uFF0C\\u5E76\\u5728\\u4E0B\\u6B21\\u6E32\\u67D3\\u65F6\\u91CD\\u65B0\\u8BA1\\u7B97\\u5B83\\u4EEC\\uFF0C\\u4F8B\\u5982\\uFF0C\\u4E3A\\u5C4F\\u5E55\\u5916\\u7684\\u7EC4\\u4EF6\\u91CA\\u653E\\u5185\\u5B58\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"import { useMemoOne as useStableMemo } from 'use-memo-one'\\nimport { useAtomValue } from 'jotai/react'\\nimport { atomEffect } from 'jotai-effect'\\n\\ntype EffectFn = Parameters<typeof atomEffect>[0]\\n\\nexport function useAtomEffect(effectFn: EffectFn) {\\n  useAtomValue(useStableMemo(() => atomEffect(effectFn), [effectFn]))\\n}\\n\")), mdx(\"h3\", null, \"Example Usage {#example-usage}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useCallbackOne as useStableCallback } from 'use-memo-one'\\nimport { atom, useAtom } from 'jotai'\\nimport { atomFamily } from 'jotai/utils'\\nimport { useAtomEffect } from './useAtomEffect'\\n\\nconst channelSubscriptionAtomFamily = atomFamily<Channel>(\\n  (channelId: string) => {\\n    return atom(new Channel(channelId))\\n  },\\n)\\nconst messagesAtom = atom<Message[]>([])\\n\\nfunction Messages({ channelId }: { channelId: string }) {\\n  const [messages] = useAtom(messagesAtom)\\n  useAtomEffect(\\n    useStableCallback(\\n      (get, set) => {\\n        const channel = get(channelSubscriptionAtomFamily(channelId))\\n        const unsubscribe = channel.subscribe((message) => {\\n          set(messagesAtom, (prev) => [...prev, message])\\n        })\\n        return unsubscribe\\n      },\\n      [id],\\n    ),\\n  )\\n  return (\\n    <>\\n      <h1>You have {messages.length} messages</h1>\\n      <hr />\\n      {messages.map((message) => (\\n        <div key={message.id}>{message.text}</div>\\n      ))}\\n    </>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"de0e1b3f-ecfd-52fd-ab06-fb549ec34156","slug":"recipes/use-atom-effect","__params":{"slug":"recipes"}}},"staticQueryHashes":["171421096","930225796"]}