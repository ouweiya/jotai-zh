{"componentChunkName":"component---src-pages-docs-mdx-slug-js","path":"/docs/recipes/atom-with-toggle","result":{"data":{"mdx":{"slug":"recipes/atom-with-toggle","frontmatter":{"title":"atomWithToggle","description":null},"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {\n  \"title\": \"atomWithToggle\",\n  \"nav\": 8.04,\n  \"keywords\": \"creators,toggle\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithToggle\"), \" \\u521B\\u5EFA\\u4E00\\u4E2A\\u65B0\\u7684 atom\\uFF0C\\u5176\\u521D\\u59CB\\u72B6\\u6001\\u4E3A\\u5E03\\u5C14\\u503C\\uFF0C\\u5E76\\u5E26\\u6709\\u4E00\\u4E2A\\u5207\\u6362\\u5B83\\u7684 setter \\u51FD\\u6570\\u3002\")), mdx(\"p\", null, \"\\u8FD9\\u907F\\u514D\\u4E86\\u5FC5\\u987B\\u8BBE\\u7F6E\\u53E6\\u4E00\\u4E2A atom \\u6765\\u66F4\\u65B0\\u7B2C\\u4E00\\u4E2A\\u7684\\u72B6\\u6001\\u7684\\u6837\\u677F\\u4EE3\\u7801\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"import { WritableAtom, atom } from 'jotai'\\n\\nexport function atomWithToggle(\\n  initialValue?: boolean,\\n): WritableAtom<boolean, [boolean?], void> {\\n  const anAtom = atom(initialValue, (get, set, nextValue?: boolean) => {\\n    const update = nextValue ?? !get(anAtom)\\n    set(anAtom, update)\\n  })\\n\\n  return anAtom as WritableAtom<boolean, [boolean?], void>\\n}\\n\")), mdx(\"p\", null, \"\\u53EF\\u4EE5\\u63D0\\u4F9B\\u4E00\\u4E2A\\u53EF\\u9009\\u7684\\u521D\\u59CB\\u72B6\\u6001\\u4F5C\\u4E3A\\u7B2C\\u4E00\\u4E2A\\u53C2\\u6570\\u3002\"), mdx(\"p\", null, \"setter \\u51FD\\u6570\\u53EF\\u4EE5\\u6709\\u4E00\\u4E2A\\u53EF\\u9009\\u7684\\u53C2\\u6570\\uFF0C\\u7528\\u4E8E\\u5F3A\\u5236\\u8BBE\\u5B9A\\u7279\\u5B9A\\u7684\\u72B6\\u6001\\uFF0C\\u6BD4\\u5982\\u5982\\u679C\\u4F60\\u60F3\\u4ECE\\u4E2D\\u521B\\u5EFA\\u4E00\\u4E2A setActive \\u51FD\\u6570\\u3002\"), mdx(\"p\", null, \"\\u4E0B\\u9762\\u662F\\u5B83\\u7684\\u4F7F\\u7528\\u65B9\\u6CD5\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import { atomWithToggle } from 'XXX'\\n\\n// \\u521D\\u59CB\\u503C\\u5C06\\u8BBE\\u7F6E\\u4E3A true\\nconst isActiveAtom = atomWithToggle(true)\\n\")), mdx(\"p\", null, \"And in a component:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const Toggle = () => {\\n  const [isActive, toggle] = useAtom(isActiveAtom)\\n\\n  return (\\n    <>\\n      <button onClick={() => toggle()}>\\n        isActive: {isActive ? 'yes' : 'no'}\\n      </button>\\n      <button onClick={() => toggle(true)}>force true</button>\\n      <button onClick={() => toggle(false)}>force false</button>\\n    </>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"0aa2f8d9-6e91-523a-95fc-6d1c6eb3710c","slug":"recipes/atom-with-toggle","__params":{"slug":"recipes"}}},"staticQueryHashes":["171421096","930225796"]}