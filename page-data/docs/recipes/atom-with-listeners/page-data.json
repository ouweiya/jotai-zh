{"componentChunkName":"component---src-pages-docs-mdx-slug-js","path":"/docs/recipes/atom-with-listeners","result":{"data":{"mdx":{"slug":"recipes/atom-with-listeners","frontmatter":{"title":"atomWithListeners","description":null},"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {\n  \"title\": \"atomWithListeners\",\n  \"nav\": 8.08,\n  \"keywords\": \"creators,listeners\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithListeners\"), \" \\u521B\\u5EFA\\u4E86\\u4E00\\u4E2A\\u539F\\u5B50\\u548C\\u4E00\\u4E2A\\u94A9\\u5B50\\u3002\\u8FD9\\u4E2A\\u94A9\\u5B50\\u53EF\\u4EE5\\u88AB\\u8C03\\u7528\\u6765\\n\\u6DFB\\u52A0\\u4E00\\u4E2A\\u65B0\\u7684\\u76D1\\u542C\\u5668\\u3002\\u8FD9\\u4E2A\\u94A9\\u5B50\\u63A5\\u53D7\\u4E00\\u4E2A\\u56DE\\u8C03\\u51FD\\u6570\\u4F5C\\u4E3A\\u53C2\\u6570\\uFF0C\\u6BCF\\u6B21\\u8BBE\\u7F6E\\u539F\\u5B50\\u7684\\u503C\\u65F6\\uFF0C\\n\\u90FD\\u4F1A\\u8C03\\u7528\\u8FD9\\u4E2A\\u56DE\\u8C03\\u51FD\\u6570\\u3002\\u94A9\\u5B50\\u8FD8\\n\\u8FD4\\u56DE\\u4E00\\u4E2A\\u51FD\\u6570\\u6765\\u79FB\\u9664\\u76D1\\u542C\\u5668\\u3002\")), mdx(\"p\", null, \"\\u8FD9\\u5728\\u4F60\\u60F3\\u521B\\u5EFA\\u4E00\\u4E2A\\u7EC4\\u4EF6\\u6765\\u76D1\\u542C\\u539F\\u5B50\\u72B6\\u6001\\u7684\\u53D8\\u5316\\u65F6\\u975E\\u5E38\\u6709\\u7528\\uFF0C\\u800C\\u65E0\\u9700\\u5728\\u6BCF\\u6B21\\u72B6\\u6001\\u53D8\\u5316\\u65F6\\u90FD\\u91CD\\u65B0\\u6E32\\u67D3\\u8BE5\\u7EC4\\u4EF6\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"import { useEffect } from 'react'\\nimport { atom, useSetAtom, Getter, Setter, SetStateAction } from 'jotai'\\n\\ntype Callback<Value> = (\\n  get: Getter,\\n  set: Setter,\\n  newVal: Value,\\n  prevVal: Value,\\n) => void\\n\\nexport function atomWithListeners<Value>(initialValue: Value) {\\n  const baseAtom = atom(initialValue)\\n  const listenersAtom = atom<Callback<Value>[]>([])\\n  const anAtom = atom(\\n    (get) => get(baseAtom),\\n    (get, set, arg: SetStateAction<Value>) => {\\n      const prevVal = get(baseAtom)\\n      set(baseAtom, arg)\\n      const newVal = get(baseAtom)\\n      get(listenersAtom).forEach((callback) => {\\n        callback(get, set, newVal, prevVal)\\n      })\\n    },\\n  )\\n  const useListener = (callback: Callback<Value>) => {\\n    const setListeners = useSetAtom(listenersAtom)\\n    useEffect(() => {\\n      setListeners((prev) => [...prev, callback])\\n      return () =>\\n        setListeners((prev) => {\\n          const index = prev.indexOf(callback)\\n          return [...prev.slice(0, index), ...prev.slice(index + 1)]\\n        })\\n    }, [setListeners, callback])\\n  }\\n  return [anAtom, useListener] as const\\n}\\n\")), mdx(\"p\", null, \"In a component:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [countAtom, useCountListener] = atomWithListeners(0)\\n\\nfunction EvenCounter() {\\n  const [evenCount, setEvenCount] = useState(0)\\n\\n  useCountListener(\\n    useCallback(\\n      (get, set, newVal, prevVal) => {\\n        // \\u6BCF\\u6B21\\u8BBE\\u7F6E `countAtom` \\u7684\\u503C\\u65F6\\uFF0C\\u6211\\u4EEC\\u90FD\\u4F1A\\u68C0\\u67E5\\u5B83\\u7684\\u65B0\\u503C\\u662F\\u5426\\u4E3A\\u5076\\u6570\\uFF0C\\n        // \\u5982\\u679C\\u662F\\uFF0C\\u6211\\u4EEC\\u5C31\\u589E\\u52A0 `evenCount`\\u3002\\n        if (newVal % 2 === 0) {\\n          setEvenCount((c) => c + 1)\\n        }\\n      },\\n      [setEvenCount],\\n    ),\\n  )\\n\\n  return <>Count was set to an even number {evenCount} times.</>\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"76569f59-11f9-5311-b322-d5a9392da7d8","slug":"recipes/atom-with-listeners","__params":{"slug":"recipes"}}},"staticQueryHashes":["171421096","930225796"]}