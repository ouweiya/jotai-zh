{"componentChunkName":"component---src-pages-docs-mdx-slug-js","path":"/docs/guides/persistence","result":{"data":{"mdx":{"slug":"guides/persistence","frontmatter":{"title":"持久性","description":"How to persist atoms"},"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {\n  \"title\": \"持久性\",\n  \"description\": \"How to persist atoms\",\n  \"nav\": 7.14\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\nconst CodeSandbox = makeShortcode(\"CodeSandbox\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Jotai \\u5728\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../utilities/storage.mdx\"\n  }, \"\\u5DE5\\u5177\\u5305\\u4E2D\\u6709\\u4E00\\u4E2A\\u7528\\u4E8E\\u6301\\u4E45\\u5316\\u7684 atomWithStorage \\u51FD\\u6570\"), \"\\uFF0C\\u652F\\u6301\\u5728 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sessionStorage\"), \"\\u3001\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localStorage\"), \"\\u3001\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AsyncStorage\"), \" \\u6216 URL hash \\u4E2D\\u6301\\u4E45\\u5316\\u72B6\\u6001\\u3002\"), mdx(\"p\", null, \"\\uFF08\\u6CE8\\u610F\\uFF1A\\u8FD9\\u7BC7\\u6307\\u5357\\u6709\\u4E9B\\u8FC7\\u65F6\\uFF0C\\u9700\\u8981\\u4E00\\u4E9B\\u91CD\\u5199\\u3002\\uFF09\"), mdx(\"p\", null, \"\\u8FD9\\u91CC\\u8FD8\\u6709\\u51E0\\u79CD\\u66FF\\u4EE3\\u5B9E\\u73B0\\uFF1A\"), mdx(\"h3\", null, \"\\u4F7F\\u7528 localStorage \\u7684\\u7B80\\u5355\\u6A21\\u5F0F {#a-simple-pattern-with-localstorage}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const strAtom = atom(localStorage.getItem('myKey') ?? 'foo')\\n\\nconst strAtomWithPersistence = atom(\\n  (get) => get(strAtom),\\n  (get, set, newStr) => {\\n    set(strAtom, newStr)\\n    localStorage.setItem('myKey', newStr)\\n  },\\n)\\n\")), mdx(\"h3\", null, \"\\u4F7F\\u7528 localStorage \\u548C JSON \\u89E3\\u6790\\u7684\\u8F85\\u52A9\\u51FD\\u6570 {#a-helper-function-with-localstorage-and-json-parse}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const atomWithLocalStorage = (key, initialValue) => {\\n  const getInitialValue = () => {\\n    const item = localStorage.getItem(key)\\n    if (item !== null) {\\n      return JSON.parse(item)\\n    }\\n    return initialValue\\n  }\\n  const baseAtom = atom(getInitialValue())\\n  const derivedAtom = atom(\\n    (get) => get(baseAtom),\\n    (get, set, update) => {\\n      const nextValue =\\n        typeof update === 'function' ? update(get(baseAtom)) : update\\n      set(baseAtom, nextValue)\\n      localStorage.setItem(key, JSON.stringify(nextValue))\\n    },\\n  )\\n  return derivedAtom\\n}\\n\")), mdx(\"p\", null, \"\\uFF08\\u5E94\\u6DFB\\u52A0\\u9519\\u8BEF\\u5904\\u7406\\u3002\\uFF09\"), mdx(\"h3\", null, \"\\u4F7F\\u7528 AsyncStorage \\u548C JSON \\u89E3\\u6790\\u7684\\u8F85\\u52A9\\u51FD\\u6570 {#a-helper-function-with-asyncstorage-and-json-parse}\"), mdx(\"p\", null, \"\\u8FD9\\u9700\\u8981 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../core/atom.mdx#on-mount\"\n  }, \"onMount\"), \"\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const atomWithAsyncStorage = (key, initialValue) => {\\n  const baseAtom = atom(initialValue)\\n  baseAtom.onMount = (setValue) => {\\n    ;(async () => {\\n      const item = await AsyncStorage.getItem(key)\\n      setValue(JSON.parse(item))\\n    })()\\n  }\\n  const derivedAtom = atom(\\n    (get) => get(baseAtom),\\n    (get, set, update) => {\\n      const nextValue =\\n        typeof update === 'function' ? update(get(baseAtom)) : update\\n      set(baseAtom, nextValue)\\n      AsyncStorage\\n\\n.setItem\\n\\n(key, JSON.stringify(nextValue))\\n    },\\n  )\\n  return derivedAtom\\n}\\n\")), mdx(\"p\", null, \"\\u4E0D\\u8981\\u5FD8\\u8BB0\\u67E5\\u770B \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../guides/async.mdx\"\n  }, \"Async \\u6587\\u6863\"), \"\\u4EE5\\u83B7\\u53D6\\u66F4\\u591A\\u5173\\u4E8E\\u5982\\u4F55\\u4F7F\\u7528\\u5F02\\u6B65\\u539F\\u5B50\\u7684\\u8BE6\\u7EC6\\u4FE1\\u606F\\u3002\"), mdx(\"h3\", null, \"\\u4F7F\\u7528 sessionStorage \\u7684\\u793A\\u4F8B {#example-with-sessionstorage}\"), mdx(\"p\", null, \"\\u4E0E AsyncStorage \\u76F8\\u540C\\uFF0C\\u53EA\\u9700\\u4F7F\\u7528 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithStorage\"), \" \\u5DE5\\u5177\\u5E76\\u7528 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sessionStorage\"), \" \\u8986\\u76D6\\u9ED8\\u8BA4\\u5B58\\u50A8\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import { atomWithStorage, createJSONStorage } from 'jotai/utils'\\n\\nconst storage = createJSONStorage(() => sessionStorage)\\nconst someAtom = atomWithStorage('some-key', someInitialValue, storage)\\n\")), mdx(\"h3\", null, \"A serialize atom pattern {#a-serialize-atom-pattern}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"type Actions =\\n  | { type: 'serialize'; callback: (value: string) => void }\\n  | { type: 'deserialize'; value: string }\\n\\nconst serializeAtom = atom(null, (get, set, action: Actions) => {\\n  if (action.type === 'serialize') {\\n    const obj = {\\n      todos: get(todosAtom).map(get),\\n    }\\n    action.callback(JSON.stringify(obj))\\n  } else if (action.type === 'deserialize') {\\n    const obj = JSON.parse(action.value)\\n    // \\u9700\\u8981\\u9519\\u8BEF\\u5904\\u7406\\u548C\\u7C7B\\u578B\\u68C0\\u67E5\\n    set(\\n      todosAtom,\\n      obj.todos.map((todo: Todo) => atom(todo)),\\n    )\\n  }\\n})\\n\\nconst Persist = () => {\\n  const [, dispatch] = useAtom(serializeAtom)\\n  const save = () => {\\n    dispatch({\\n      type: 'serialize',\\n      callback: (value) => {\\n        localStorage.setItem('serializedTodos', value)\\n      },\\n    })\\n  }\\n  const load = () => {\\n    const value = localStorage.getItem('serializedTodos')\\n    if (value) {\\n      dispatch({ type: 'deserialize', value })\\n    }\\n  }\\n  return (\\n    <div>\\n      <button onClick={save}>Save to localStorage</button>\\n      <button onClick={load}>Load from localStorage</button>\\n    </div>\\n  )\\n}\\n\")), mdx(\"h4\", null, \"\\u793A\\u4F8B {#examples}\"), mdx(CodeSandbox, {\n    id: \"g96xjx\",\n    mdxType: \"CodeSandbox\"\n  }), mdx(\"h3\", null, \"\\u4F7F\\u7528 atomFamily \\u7684\\u6A21\\u5F0F {#a-pattern-with-atomfamily}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"type Actions =\\n  | { type: 'serialize'; callback: (value: string) => void }\\n  | { type: 'deserialize'; value: string }\\n\\nconst serializeAtom = atom(null, (get, set, action: Actions) => {\\n  if (action.type === 'serialize') {\\n    const todos = get(todosAtom)\\n    const todoMap: Record<string, { title: string; completed: boolean }> = {}\\n    todos.forEach((id) => {\\n      todoMap[id] = get(todoAtomFamily({ id }))\\n    })\\n    const obj = {\\n      todos,\\n      todoMap,\\n      filter: get(filterAtom),\\n    }\\n    action.callback(JSON.stringify(obj))\\n  } else if (action.type === 'deserialize') {\\n    const obj = JSON.parse(action.value)\\n    // \\u9700\\u8981\\u9519\\u8BEF\\u5904\\u7406\\u548C\\u7C7B\\u578B\\u68C0\\u67E5\\n    set(filterAtom, obj.filter)\\n    obj.todos.forEach((id: string) => {\\n      const todo = obj.todoMap[id]\\n      set(todoAtomFamily({ id, ...todo }), todo)\\n    })\\n    set(todosAtom, obj.todos)\\n  }\\n})\\n\\nconst Persist = () => {\\n  const [, dispatch] = useAtom(serializeAtom)\\n  const save = () => {\\n    dispatch({\\n      type: 'serialize',\\n      callback: (value) => {\\n        localStorage.setItem('serializedTodos', value)\\n      },\\n    })\\n  }\\n  const load = () => {\\n    const value = localStorage.getItem('serializedTodos')\\n    if (value) {\\n      dispatch({ type: 'deserialize', value })\\n    }\\n  }\\n  return (\\n    <div>\\n      <button onClick={save}>\\u4FDD\\u5B58\\u5230 localStorage</button>\\n      <button onClick={load}>\\u4ECE localStorage \\u52A0\\u8F7D</button>\\n    </div>\\n  )\\n}\\n\")), mdx(\"h4\", null, \"\\u793A\\u4F8B {#examples}\"), mdx(CodeSandbox, {\n    id: \"oyiw5r\",\n    mdxType: \"CodeSandbox\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"b88e12f5-92db-5ffc-a87b-418fe80f18e8","slug":"guides/persistence","__params":{"slug":"guides"}}},"staticQueryHashes":["171421096","930225796"]}