{"componentChunkName":"component---src-pages-docs-mdx-slug-js","path":"/docs/guides/testing","result":{"data":{"mdx":{"slug":"guides/testing","frontmatter":{"title":"测试","description":"How to test your code using Jotai"},"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {\n  \"title\": \"测试\",\n  \"description\": \"How to test your code using Jotai\",\n  \"nav\": 7.09,\n  \"keywords\": \"test,testing\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\u6211\\u4EEC\\u56DE\\u5E94\\u4E86\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://testing-library.com/docs/guiding-principles/\"\n  }, \"\\u6D4B\\u8BD5\\u5E93\\u7684\\u6307\\u5BFC\\u539F\\u5219\"), \"\\uFF1A\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\\"\\u4F60\\u7684\\u6D4B\\u8BD5\\u8D8A\\u50CF\\u4F60\\u7684\\u8F6F\\u4EF6\\u88AB\\u4F7F\\u7528\\u7684\\u65B9\\u5F0F\\uFF0C\\u5B83\\u4EEC\\u5C31\\u80FD\\u7ED9\\u4F60\\u66F4\\u591A\\u7684\\u4FE1\\u5FC3\\u3002\\\"\")), mdx(\"p\", null, \"\\u6211\\u4EEC\\u9F13\\u52B1\\u4F60\\u50CF\\u7528\\u6237\\u4F1A\\u4E0E\\u4F60\\u7684\\u539F\\u5B50\\u548C\\u7EC4\\u4EF6\\u4EA4\\u4E92\\u90A3\\u6837\\u7F16\\u5199\\u6D4B\\u8BD5\\uFF0C\\u56E0\\u6B64\\u5C06Jotai\\u89C6\\u4E3A\\u4E00\\u4E2A\\u5B9E\\u73B0\\u7EC6\\u8282\\u3002\"), mdx(\"p\", null, \"\\u8FD9\\u91CC\\u6709\\u4E00\\u4E2A\\u4F7F\\u7528\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/testing-library/react-testing-library\"\n  }, \"React\\u6D4B\\u8BD5\\u5E93\"), \"\\u7684\\u4F8B\\u5B50\\uFF1A\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Counter.tsx\"), \"\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { atom, useAtom } from 'jotai'\\n\\nexport const countAtom = atom(0)\\n\\nexport function Counter() {\\n  const [count, setCount] = useAtom(countAtom)\\n  return (\\n    <h1>\\n      <p>{count}</p>\\n      <button onClick={() => setCount((c) => c + 1)}>one up</button>\\n    </h1>\\n  )\\n}\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Counter.test.ts\"), \"\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import React from 'react'\\nimport { render, screen, fireEvent } from '@testing-library/react'\\nimport { Counter } from './Counter'\\n\\ntest('should increment counter', () => {\\n  // Arrange\\n  render(<Counter />)\\n\\n  const counter = screen.getByText('0')\\n  const incrementButton = screen.getByText('one up')\\n  // Act\\n  fireEvent.click(incrementButton)\\n  // Assert\\n  expect(counter.textContent).toEqual('1')\\n})\\n\")), mdx(\"h3\", null, \"\\u6CE8\\u5165\\u503C {#injected-values}\"), mdx(\"p\", null, \"\\u4F60\\u53EF\\u80FD\\u60F3\\u5728\\u5F00\\u59CB\\u4E00\\u4E9B\\u6D4B\\u8BD5\\u4E4B\\u524D\\u5411\\u4F60\\u7684\\u539F\\u5B50\\u6CE8\\u5165\\u4EFB\\u610F\\u503C\\u3002\\u4E5F\\u8BB8\\u8BA1\\u6570\\u5668\\u5E94\\u8BE5\\u9650\\u5236\\u5230100\\u3002\\u8BA9\\u6211\\u4EEC\\u770B\\u770B\\u5982\\u4F55\\u6D4B\\u8BD5\\u5B83\\u5728\\u8FBE\\u5230100\\u540E\\u4E0D\\u4F1A\\u589E\\u52A0\\u3002\\u4E3A\\u4E86\\u505A\\u5230\\u8FD9\\u4E00\\u70B9\\uFF0C\\u53EA\\u9700\\u4F7F\\u7528\\u4E00\\u4E2A\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../core/provider.mdx\"\n  }, \"Provider\"), \"\\uFF0C\\u5E76\\u5BFC\\u51FA\\u4F60\\u7684\\u539F\\u5B50\\u4EE5\\u4FBF\\u586B\\u5145\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import React from 'react'\\nimport { render, screen, fireEvent } from '@testing-library/react'\\nimport { useHydrateAtoms } from 'jotai/utils'\\nimport { countAtom, Counter } from './Counter'\\nimport { Provider } from 'jotai'\\n\\nconst HydrateAtoms = ({ initialValues, children }) => {\\n  useHydrateAtoms(initialValues)\\n  return children\\n}\\n\\nconst TestProvider = ({ initialValues, children }) => (\\n  <Provider>\\n    <HydrateAtoms initialValues={initialValues}>{children}</HydrateAtoms>\\n  </Provider>\\n)\\n\\nconst CounterProvider = () => {\\n  return (\\n    <TestProvider initialValues={[[countAtom, 100]]}>\\n      <Counter />\\n    </TestProvider>\\n  )\\n}\\n\\ntest('should not increment on max (100)', () => {\\n  render(<CounterProvider />)\\n\\n  const counter = screen.getByText('100')\\n  const incrementButton = screen.getByText('one up')\\n  fireEvent.click(incrementButton)\\n  expect(counter.textContent).toEqual('100')\\n})\\n\")), mdx(\"h3\", null, \"\\u81EA\\u5B9A\\u4E49\\u94A9\\u5B50 {#custom-hooks}\"), mdx(\"p\", null, \"\\u5982\\u679C\\u4F60\\u6709\\u590D\\u6742\\u7684\\u539F\\u5B50\\uFF0C\\u6709\\u65F6\\u4F60\\u53EF\\u80FD\\u60F3\\u8981\\u5355\\u72EC\\u6D4B\\u8BD5\\u5B83\\u4EEC\\u3002\"), mdx(\"p\", null, \"\\u4E3A\\u6B64\\uFF0C\\u4F60\\u53EF\\u4EE5\\u4F7F\\u7528\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/testing-library/react-hooks-testing-library\"\n  }, \"React Hooks\\u6D4B\\u8BD5\\u5E93\"), \"\\u3002\\u4E0B\\u9762\\u662F\\u4E00\\u4E2A\\u4F8B\\u5B50\\uFF1A\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"countAtom.ts\"), \"\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"import { useAtom } from 'jotai'\\nimport { atomWithReducer } from 'jotai/utils'\\n\\nconst reducer = (state: number, action?: 'INCREASE' | 'DECREASE') => {\\n  switch (action) {\\n    case 'INCREASE':\\n      return state + 1\\n    case 'DECREASE':\\n      return state - 1\\n    case undefined:\\n      return state\\n  }\\n}\\nexport const countAtom = atomWithReducer(0, reducer)\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"countAtom.test.ts\"), \"\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"import { renderHook, act } from '@testing-library/react-hooks'\\nimport { useAtom } from 'jotai'\\nimport { countAtom } from './countAtom'\\n\\ntest('should increment counter', () => {\\n  const { result } = renderHook(() => useAtom(countAtom))\\n\\n  act(() => {\\n    result.current[1]('INCREASE')\\n  })\\n\\n  expect(result.current[0]).toBe(1)\\n})\\n\")), mdx(\"h3\", null, \"\\u4F7F\\u7528React-Native\\u7684\\u4F8B\\u5B50 {#example-with-react-native}\"), mdx(\"p\", null, \"\\u5F53\\u7136\\uFF0C\\u4F60\\u4E5F\\u53EF\\u4EE5\\u7528\\u76F8\\u540C\\u7684\\u65B9\\u5F0F\\u6D4B\\u8BD5React-Native\\u7EC4\\u4EF6\\uFF0C\\u65E0\\u8BBA\\u662F\\u5426\\u4F7F\\u7528\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Provider\"), \"\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import React from 'react'\\nimport { render, fireEvent } from '@testing-library/react-native'\\nimport { Counter } from './counter'\\n\\ntest('should increment counter', () => {\\n  // \\u5B89\\u6392\\n  const { getByText } = render(<Counter />)\\n  const counter = getByText('0')\\n  const incrementButton = getByText('one up')\\n  // \\u6267\\u884C\\n  fireEvent.press(incrementButton)\\n  // \\u65AD\\u8A00\\n  expect(counter.props.children.toString()).toEqual('1')\\n})\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"024448fc-c676-52b1-b8ff-325316b7f079","slug":"guides/testing","__params":{"slug":"guides"}}},"staticQueryHashes":["171421096","930225796"]}