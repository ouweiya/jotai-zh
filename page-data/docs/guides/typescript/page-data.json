{"componentChunkName":"component---src-pages-docs-mdx-slug-js","path":"/docs/guides/typescript","result":{"data":{"mdx":{"slug":"guides/typescript","frontmatter":{"title":"TypeScript","description":"How to use Jotai with TypeScript"},"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {\n  \"title\": \"TypeScript\",\n  \"description\": \"How to use Jotai with TypeScript\",\n  \"nav\": 7.02,\n  \"keywords\": \"typescript,types\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"\\u7248\\u672C\\u8981\\u6C42 {#version-requirement}\"), mdx(\"p\", null, \"Jotai \\u4F7F\\u7528 TypeScript 3.8+ \\u8BED\\u6CD5\\u3002\\u5982\\u679C\\u4F60\\u7684 TypeScript \\u7248\\u672C\\u662F 3.7.5 \\u6216\\u66F4\\u4F4E\\uFF0C\\u8BF7\\u5347\\u7EA7\\u4F60\\u7684 TypeScript \\u7248\\u672C\\u3002\"), mdx(\"p\", null, \"Jotai \\u91CD\\u5EA6\\u4F9D\\u8D56\\u7C7B\\u578B\\u63A8\\u65AD\\uFF0C\\u5E76\\u4E14\\u9700\\u8981\\u542F\\u7528 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"strictNullChecks\"), \"\\u3002\\u8BF7\\u8003\\u8651\\u5728\\u4F60\\u7684 tsconfig.json \\u4E2D\\u6DFB\\u52A0 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"strict\\\": true\"), \"\\u3002\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/pmndrs/jotai/issues/550\"\n  }, \"#550\"), \"\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/pmndrs/jotai/issues/802\"\n  }, \"#802\"), \"\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/pmndrs/jotai/issues/838\"\n  }, \"#838\")), mdx(\"h3\", null, \"\\u6CE8\\u610F\\u4E8B\\u9879 {#notes}\"), mdx(\"h4\", null, \"\\u539F\\u59CB atoms \\u57FA\\u672C\\u4E0A\\u662F\\u7C7B\\u578B\\u63A8\\u65AD\\u7684 {#primitive-atoms-are-basically-type-inferred}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"const numAtom = atom(0) // \\u539F\\u59CB\\u6570\\u5B57 atom\\nconst strAtom = atom('') // \\u539F\\u59CB\\u5B57\\u7B26\\u4E32 atom\\n\")), mdx(\"h3\", null, \"\\u539F\\u59CB atoms \\u53EF\\u4EE5\\u663E\\u5F0F\\u5730\\u8FDB\\u884C\\u7C7B\\u578B\\u5316 {#primitive-atoms-can-be-explicitly-typed}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"const numAtom = atom<number>(0)\\nconst numAtom = atom<number | null>(0)\\nconst arrAtom = atom<string[]>([])\\n\")), mdx(\"h4\", null, \"\\u6D3E\\u751F atoms \\u5927\\u90E8\\u5206\\u53EF\\u4EE5\\u63A8\\u65AD\\u51FA\\u5B83\\u4EEC\\u7684\\u7C7B\\u578B {#derived-atoms-can-mostly-have-their-types-inferred}\"), mdx(\"p\", null, \"\\u4E00\\u822C\\u6765\\u8BF4\\uFF0C\\u8FD9\\u662F\\u63A8\\u8350\\u7684\\u65B9\\u6CD5\\uFF0C\\u56E0\\u4E3A\\u7C7B\\u578B\\u5316\\u6D3E\\u751F atoms \\u53EF\\u80FD\\u4F1A\\u6709\\u4E9B\\u6DF7\\u6DC6\\uFF0C\\u7279\\u522B\\u662F\\u5BF9\\u4E8E\\u7B2C\\u4E00\\u6B21\\u5C1D\\u8BD5\\u7684\\u4EBA\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"\\n# \\u53EA\\u8BFB\\u6D3E\\u751F atoms {#read-only-derived-atoms}\\nconst readOnlyAtom = atom((get) => get(numAtom))\\nconst asyncReadOnlyAtom = atom(async (get) => await get(someAsyncAtom))\\n\\n# \\u53EA\\u5199 atoms {#write-only-atoms}\\nconst writeOnlyAtom = atom(null, (_get, set, str: string) => set(fooAtom, str))\\nconst multipleArgumentsAtom = atom(\\n  null,\\n  (_get, set, valueOne: number, valueTwo: number) =>\\n    set(fooAtom, Math.max(valueOne, valueTwo))\\n);\\n\\n# \\u8BFB/\\u5199 atoms {#read/write-atoms}\\nconst readWriteAtom = atom(\\n  (get) => get(strAtom),\\n  (_get, set, num: number) => set(strAtom, String(num))\\n)\\nconst asyncReadWriteAtom = atom(\\n  async (get) => await get(asyncStrAtom),\\n  (_get, set, num: number) => set(strAtom, String(num))\\n)\\n\")), mdx(\"h4\", null, \"\\u6D3E\\u751F atoms \\u4E5F\\u53EF\\u4EE5\\u663E\\u5F0F\\u5730\\u8FDB\\u884C\\u7C7B\\u578B\\u5316 {#derived-atoms-can-also-be-explicitly-typed}\"), mdx(\"p\", null, \"\\u5982\\u679C\\u4F60\\u9047\\u5230\\u9700\\u8981\\u6216\\u60F3\\u8981\\u663E\\u5F0F\\u7C7B\\u578B\\u5316\\u4F60\\u7684\\u6D3E\\u751F atoms \\u7684\\u60C5\\u51B5\\uFF0C\\u4F60\\u4E5F\\u53EF\\u4EE5\\u8FD9\\u6837\\u505A\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"const asyncStrAtom = atom<Promise<string>>(async () => 'foo')\\n\\n/**\\n * \\u5BF9\\u4E8E\\u53EA\\u5199 atoms\\uFF0C\\u4F60\\u9700\\u8981\\u63D0\\u4F9B\\u4E09\\u4E2A\\u7C7B\\u578B\\u53C2\\u6570\\u3002\\n * \\u7B2C\\u4E00\\u4E2A\\u7C7B\\u578B\\u53C2\\u6570\\u63CF\\u8FF0\\u4E86 atom \\u8FD4\\u56DE\\u7684\\u503C\\u3002\\u5728\\u4E0B\\u9762\\u7684\\u4F8B\\u5B50\\u4E2D\\uFF0C\\u8FD9\\u662F `null`\\u3002\\n * \\u7B2C\\u4E8C\\u4E2A\\u7C7B\\u578B\\u53C2\\u6570\\u63CF\\u8FF0\\u4E86\\u4F60\\u5C06\\u4F20\\u9012\\u7ED9 \\\"write\\\" \\u51FD\\u6570\\u7684\\u53C2\\u6570\\uFF08\\u590D\\u6570\\uFF09\\u3002\\u5373\\u4F7F\\u4F60\\u53EA\\u8BA1\\u5212\\u6709\\u4E00\\u4E2A\\u53C2\\u6570\\uFF0C\\u8FD9\\u4E2A\\u7C7B\\u578B\\u4E5F\\u5FC5\\u987B\\u662F\\u6570\\u7EC4\\uFF0C\\u5982\\u793A\\u4F8B\\u4E2D\\u6240\\u793A\\u3002\\n * \\u7B2C\\u4E09\\u4E2A\\u7C7B\\u578B\\u53C2\\u6570\\u63CF\\u8FF0\\u4E86 \\\"write\\\" \\u51FD\\u6570\\u7684\\u8FD4\\u56DE\\u503C\\u3002\\u901A\\u5E38\\uFF0C\\u6CA1\\u6709\\u8FD4\\u56DE\\u503C\\uFF0C\\u8FD9\\u5C31\\u662F\\u4E3A\\u4EC0\\u4E48\\u6211\\u4EEC\\u5728\\u4E0B\\u9762\\u7684\\u4F8B\\u5B50\\u4E2D\\u4F7F\\u7528 `void`\\u3002\\n */\\nconst writeOnlyAtom = atom<null, [string, number], void>(\\n  null,\\n  (_get, set, stringValue, numberValue) => set(fooAtom, stringValue),\\n)\\n\\n/**\\n * \\u8BFB/\\u5199 atoms \\u4E5F\\u9700\\u8981\\u540C\\u6837\\u7684\\u4E09\\u4E2A\\u7C7B\\u578B\\u53C2\\u6570\\u3002\\n * \\u4E3A\\u4E86\\u5B8C\\u6574\\u6027\\uFF0C\\u5728\\u8FD9\\u4E2A\\u4F8B\\u5B50\\u4E2D\\uFF0C\\u6211\\u4EEC\\u5C55\\u793A\\u4E86\\u7B2C\\u4E00\\u4E2A\\u7C7B\\u578B\\u53C2\\u6570\\u4E5F\\u53EF\\u4EE5\\u63CF\\u8FF0\\u4E00\\u4E2A\\u5F02\\u6B65 atom\\u3002\\n */\\nconst readWriteAtom = atom<Promise<string>, [number], void>(\\n  async (get) => await get(asyncStrAtom),\\n  (_get, set, num) => set(strAtom, String(num)),\\n)\\n\")), mdx(\"h4\", null, \"useAtom \\u662F\\u57FA\\u4E8E atom \\u7C7B\\u578B\\u8FDB\\u884C\\u7C7B\\u578B\\u5316\\u7684 {#useatom-is-typed-based-on-atom-types}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"const [num, setNum] = useAtom(primitiveNumAtom)\\nconst [num] = useAtom(readOnlyNumAtom)\\nconst [, setNum] = useAtom(writeOnlyNumAtom)\\n\")), mdx(\"h4\", null, \"\\u8BBF\\u95EE atom \\u7684\\u503C\\u7C7B\\u578B {#access-to-the-value-type-of-an-atom}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"import { ExtractAtomValue, useAtomValue } from 'jotai'\\nimport { userAtom } from 'state'\\nimport { useQuery } from '@tanstack/react-query'\\n\\nexport default function WriteReview(hid) {\\n  const user = useAtomValue(userAtom)\\n  const res = useGetReviewQuery(user)\\n}\\n\\nfunction useGetReviewQuery(user: ExtractAtomValue<typeof userAtom>) {\\n  return fetch('/api/user/' + user.id + '/review')\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"2bc71348-ebb6-5522-9e33-e0fce6da0f26","slug":"guides/typescript","__params":{"slug":"guides"}}},"staticQueryHashes":["171421096","930225796"]}