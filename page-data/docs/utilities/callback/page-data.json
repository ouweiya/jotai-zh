{"componentChunkName":"component---src-pages-docs-mdx-slug-js","path":"/docs/utilities/callback","result":{"data":{"mdx":{"slug":"utilities/callback","frontmatter":{"title":"Callback","description":null},"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {\n  \"title\": \"Callback\",\n  \"nav\": 3.99,\n  \"keywords\": \"callback\",\n  \"published\": false\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\nconst CodeSandbox = makeShortcode(\"CodeSandbox\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"useAtomCallback {#useatomcallback}\"), mdx(\"p\", null, \"\\u53C2\\u8003\\uFF1A \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/pmndrs/jotai/issues/60\"\n  }, \"https://github.com/pmndrs/jotai/issues/60\")), mdx(\"h3\", null, \"\\u4F7F\\u7528\\u65B9\\u6CD5 {#usage}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"useAtomCallback<Result, Args extends unknown[]>(\\n  callback: (get: Getter, set: Setter, ...arg: Args) => Result,\\n  options?: Options\\n): (...args: Args) => Result\\n\")), mdx(\"p\", null, \"\\u8FD9\\u4E2A\\u94A9\\u5B50\\u7528\\u4E8E\\u547D\\u4EE4\\u5F0F\\u5730\\u4E0E\\u539F\\u5B50\\u8FDB\\u884C\\u4EA4\\u4E92\\u3002\\n\\u5B83\\u63A5\\u53D7\\u4E00\\u4E2A\\u56DE\\u8C03\\u51FD\\u6570\\uFF0C\\u8BE5\\u51FD\\u6570\\u7684\\u5DE5\\u4F5C\\u65B9\\u5F0F\\u7C7B\\u4F3C\\u4E8E\\u539F\\u5B50\\u5199\\u5165\\u51FD\\u6570\\uFF0C\\n\\u5E76\\u8FD4\\u56DE\\u4E00\\u4E2A\\u8FD4\\u56DE\\u539F\\u5B50\\u503C\\u7684\\u51FD\\u6570\\u3002\"), mdx(\"p\", null, \"\\u4F20\\u9012\\u7ED9\\u94A9\\u5B50\\u7684\\u56DE\\u8C03\\u5FC5\\u987B\\u662F\\u7A33\\u5B9A\\u7684\\uFF08\\u5E94\\u8BE5\\u7528 useCallback \\u5305\\u88C5\\uFF09\\u3002\"), mdx(\"h3\", null, \"\\u793A\\u4F8B {#examples}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { useEffect, useState, useCallback } from 'react'\\nimport { Provider, atom, useAtom } from 'jotai'\\nimport { useAtomCallback } from 'jotai/utils'\\n\\nconst countAtom = atom(0)\\n\\nconst Counter = () => {\\n  const [count, setCount] = useAtom(countAtom)\\n  return (\\n    <>\\n      {count} <button onClick={() => setCount((c) => c + 1)}>+1</button>\\n    </>\\n  )\\n}\\n\\nconst Monitor = () => {\\n  const [count, setCount] = useState(0)\\n  const readCount = useAtomCallback(\\n    useCallback((get) => {\\n      const currCount = get(countAtom)\\n      setCount(currCount)\\n      return currCount\\n    }, []),\\n  )\\n  useEffect(() => {\\n    const timer = setInterval(async () => {\\n      console.log(readCount())\\n    }, 1000)\\n    return () => {\\n      clearInterval(timer)\\n    }\\n  }, [readCount])\\n  return <div>current count: {count}</div>\\n}\\n\")), mdx(\"h3\", null, \"Codesandbox {#codesandbox}\"), mdx(CodeSandbox, {\n    id: \"95gxnt\",\n    mdxType: \"CodeSandbox\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"e5be566c-582d-5748-a5b0-b5f147af55d3","slug":"utilities/callback","__params":{"slug":"utilities"}}},"staticQueryHashes":["171421096","930225796"]}