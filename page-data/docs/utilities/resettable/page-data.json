{"componentChunkName":"component---src-pages-docs-mdx-slug-js","path":"/docs/utilities/resettable","result":{"data":{"mdx":{"slug":"utilities/resettable","frontmatter":{"title":"Resettable","description":null},"body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {\n  \"title\": \"Resettable\",\n  \"nav\": 3.04,\n  \"keywords\": \"reset,default\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\nconst CodeSandbox = makeShortcode(\"CodeSandbox\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"atomWithReset {#atomwithreset}\"), mdx(\"p\", null, \"\\u53C2\\u8003\\uFF1A \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/pmndrs/jotai/issues/41\"\n  }, \"https://github.com/pmndrs/jotai/issues/41\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"function atomWithReset<Value>(\\n  initialValue: Value,\\n): WritableAtom<Value, SetStateAction<Value> | typeof RESET>\\n\")), mdx(\"p\", null, \"\\u521B\\u5EFA\\u4E00\\u4E2A\\u53EF\\u4EE5\\u901A\\u8FC7 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"use-reset-atom.mdx\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"useResetAtom\")), \" \\u94A9\\u5B50\\u91CD\\u7F6E\\u4E3A\\u5176 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"initialValue\"), \" \\u7684\\u539F\\u5B50\\u3002\\u5B83\\u7684\\u5DE5\\u4F5C\\u65B9\\u5F0F\\u4E0E\\u539F\\u59CB\\u539F\\u5B50\\u5B8C\\u5168\\u76F8\\u540C\\uFF0C\\u4F46\\u4F60\\u4E5F\\u53EF\\u4EE5\\u5C06\\u5176\\u8BBE\\u7F6E\\u4E3A\\u7279\\u6B8A\\u503C \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"reset.mdx\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"RESET\")), \"\\u3002\\u8BF7\\u53C2\\u89C1 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../utilities/resettable.mdx\"\n  }, \"\\u53EF\\u91CD\\u7F6E\\u539F\\u5B50\"), \" \\u4E2D\\u7684\\u793A\\u4F8B\\u3002\"), mdx(\"h3\", null, \"\\u793A\\u4F8B {#example}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import { atomWithReset } from 'jotai/utils'\\n\\nconst dollarsAtom = atomWithReset(0)\\nconst todoListAtom = atomWithReset([\\n  { description: '\\u6DFB\\u52A0\\u4E00\\u4E2A\\u5F85\\u529E\\u4E8B\\u9879', checked: false },\\n])\\n\")), mdx(\"h2\", null, \"RESET {#reset}\"), mdx(\"p\", null, \"\\u53C2\\u8003\\uFF1A\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/pmndrs/jotai/issues/217\"\n  }, \"https://github.com/pmndrs/jotai/issues/217\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"const RESET: unique symbol\\n\")), mdx(\"p\", null, \"\\u8FD9\\u662F\\u4E00\\u4E2A\\u7279\\u6B8A\\u7684\\u503C\\uFF0C\\u88AB \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../utilities/resettable.mdx\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"atomWithReset\")), \"\\u3001\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../utilities/resettable.mdx\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"atomWithDefault\")), \" \\u521B\\u5EFA\\u7684 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../utilities/resettable.mdx\"\n  }, \"\\u53EF\\u91CD\\u7F6E\\u539F\\u5B50\"), \" \\u6216\\u8005\\u5982\\u679C\\u5B83\\u63A5\\u53D7 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RESET\"), \" \\u7B26\\u53F7\\u7684\\u53EF\\u5199\\u539F\\u5B50 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atom\"), \" \\u6240\\u63A5\\u53D7\\u3002\"), mdx(\"h3\", null, \"\\u793A\\u4F8B {#example}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { atom, useSetAtom } from 'jotai'\\nimport { atomWithReset, useResetAtom, RESET } from 'jotai/utils'\\n\\nconst dollarsAtom = atomWithReset(0)\\nconst centsAtom = atom(\\n  (get) => get(dollarsAtom) * 100,\\n  (get, set, newValue: number | typeof RESET) =>\\n    set(dollarsAtom, newValue === RESET ? newValue : newValue / 100)\\n)\\n\\nconst ResetExample = () => {\\n  const setDollars = useSetAtom(dollarsAtom)\\n  const resetCents = useResetAtom(centsAtom)\\n\\n  return (\\n    <>\\n      <button onClick={() => setDollars(RESET)}>Reset dollars</button>\\n      <button onClick={resetCents}>Reset cents</button>\\n    </>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"useResetAtom {#useresetatom}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"function useResetAtom<Value>(\\n  anAtom: WritableAtom<Value, typeof RESET>,\\n): () => void | Promise<void>\\n\")), mdx(\"p\", null, \"\\u5C06\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../utilities/resettable.mdx\"\n  }, \"\\u53EF\\u91CD\\u7F6E\\u539F\\u5B50\"), \"\\u91CD\\u7F6E\\u4E3A\\u5176\\u521D\\u59CB\\u503C\\u3002\"), mdx(\"h3\", null, \"\\u793A\\u4F8B {#example}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { useResetAtom } from 'jotai/utils'\\nimport { todoListAtom } from './store'\\n\\nconst TodoResetButton = () => {\\n  const resetTodoList = useResetAtom(todoListAtom)\\n  return <button onClick={resetTodoList}>Reset</button>\\n}\\n\")), mdx(\"h2\", null, \"atomWithDefault {#atomwithdefault}\"), mdx(\"p\", null, \"\\u53C2\\u8003\\uFF1A \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/pmndrs/jotai/issues/352\"\n  }, \"https://github.com/pmndrs/jotai/issues/352\")), mdx(\"h3\", null, \"\\u4F7F\\u7528\\u65B9\\u6CD5 {#usage}\"), mdx(\"p\", null, \"\\u8FD9\\u662F\\u4E00\\u4E2A\\u521B\\u5EFA\\u53EF\\u91CD\\u7F6E\\u539F\\u59CB\\u539F\\u5B50\\u7684\\u51FD\\u6570\\u3002\\n\\u5176\\u9ED8\\u8BA4\\u503C\\u53EF\\u4EE5\\u7528\\u8BFB\\u53D6\\u51FD\\u6570\\u6307\\u5B9A\\uFF0C\\u800C\\u4E0D\\u662F\\u9759\\u6001\\u521D\\u59CB\\u503C\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import { atomWithDefault } from 'jotai/utils'\\n\\nconst count1Atom = atom(1)\\nconst count2Atom = atomWithDefault((get) => get(count1Atom) * 2)\\n\")), mdx(\"h3\", null, \"Codesandbox {#codesandbox}\"), mdx(CodeSandbox, {\n    id: \"unfro\",\n    mdxType: \"CodeSandbox\"\n  }), mdx(\"h3\", null, \"\\u91CD\\u7F6E\\u9ED8\\u8BA4\\u503C {#resetting-default-values}\"), mdx(\"p\", null, \"\\u4F60\\u53EF\\u4EE5\\u5C06 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithDefault\"), \" \\u539F\\u5B50\\u7684\\u503C\\u91CD\\u7F6E\\u4E3A\\u5176\\u539F\\u59CB\\u9ED8\\u8BA4\\u503C\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { useAtom } from 'jotai'\\nimport { atomWithDefault, useResetAtom, RESET } from 'jotai/utils'\\n\\nconst count1Atom = atom(1)\\nconst count2Atom = atomWithDefault((get) => get(count1Atom) * 2)\\n\\nconst Counter = () => {\\n  const [count1, setCount1] = useAtom(count1Atom)\\n  const [count2, setCount2] = useAtom(count2Atom)\\n  const resetCount2 = useResetAtom(count2Atom)\\n\\n  return (\\n    <>\\n      <div>\\n        count1: {count1}, count2: {count2}\\n      </div>\\n      <button onClick={() => setCount1((c) => c + 1)}>increment count1</button>\\n      <button onClick={() => setCount2((c) => c + 1)}>increment count2</button>\\n      <button onClick={() => resetCount2()}>Reset with useResetAtom</button>\\n      <button onClick={() => setCount2(RESET)}>Reset with RESET const</button>\\n    </>\\n  )\\n}\\n\")), mdx(\"p\", null, \"\\u5F53\\u4F7F\\u7528 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"set\"), \" \\u51FD\\u6570\\u8986\\u76D6 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithDefault\"), \" \\u539F\\u5B50\\u7684\\u503C\\u65F6\\uFF0C\\u8FD9\\u53EF\\u80FD\\u4F1A\\u5F88\\u6709\\u7528\\uFF0C\\n\\u5728\\u8FD9\\u79CD\\u60C5\\u51B5\\u4E0B\\uFF0C\\u63D0\\u4F9B\\u7684 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getter\"), \" \\u51FD\\u6570\\u5C06\\u4E0D\\u518D\\u88AB\\u4F7F\\u7528\\uFF0C\\u4F9D\\u8D56\\u9879\\u539F\\u5B50\\u7684\\u4EFB\\u4F55\\u53D8\\u5316\\u90FD\\u4E0D\\u4F1A\\u89E6\\u53D1\\u66F4\\u65B0\\u3002\"), mdx(\"p\", null, \"\\u91CD\\u7F6E\\u503C\\u5141\\u8BB8\\u6211\\u4EEC\\u6062\\u590D\\u5176\\u539F\\u59CB\\u9ED8\\u8BA4\\u503C\\uFF0C\\u4E22\\u5F03\\u4E4B\\u524D\\u901A\\u8FC7 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"set\"), \" \\u51FD\\u6570\\u505A\\u51FA\\u7684\\u66F4\\u6539\\u3002\"), mdx(\"h2\", null, \"atomWithRefresh {#atomwithrefresh}\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"function atomWithRefresh<Value>(\\n  read: Read<Value, [], void>,\\n): WritableAtom<Value, [], void>\\n\")), mdx(\"p\", null, \"\\u521B\\u5EFA\\u4E00\\u4E2A\\u6211\\u4EEC\\u53EF\\u4EE5\\u5237\\u65B0\\u7684\\u539F\\u5B50\\uFF0C\\u5373\\u5F3A\\u5236\\u91CD\\u65B0\\u8BC4\\u4F30\\u8BFB\\u53D6\\u51FD\\u6570\\u3002\"), mdx(\"p\", null, \"\\u5F53\\u4F60\\u9700\\u8981\\u5237\\u65B0\\u5F02\\u6B65\\u6570\\u636E\\u65F6\\uFF0C\\u8FD9\\u4F1A\\u5F88\\u6709\\u5E2E\\u52A9\\u3002\\n\\u5B83\\u4E5F\\u53EF\\u4EE5\\u7528\\u6765\\u5B9E\\u73B0 \\\"\\u4E0B\\u62C9\\u5237\\u65B0\\\" \\u529F\\u80FD\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"function atomWithRefresh<Value, Args extends unknown[], Result>(\\n  read: Read<Value, Args, Result>,\\n  write: Write<Value, Args, Result>,\\n): WritableAtom<Value, Args | [], Result | void>\\n\")), mdx(\"p\", null, \"\\u5411 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"set\"), \" \\u4F20\\u9012\\u96F6\\u4E2A\\u53C2\\u6570\\u5C06\\u5237\\u65B0\\u3002\\n\\u5411 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"set\"), \" \\u4F20\\u9012\\u4E00\\u4E2A\\u6216\\u591A\\u4E2A\\u53C2\\u6570\\u5C06\\u8C03\\u7528 \\\"write\\\" \\u51FD\\u6570\\u3002\"), mdx(\"h3\", null, \"\\u793A\\u4F8B {#example}\"), mdx(\"p\", null, \"\\u4EE5\\u4E0B\\u662F\\u4F60\\u5982\\u4F55\\u4F7F\\u7528\\u5B83\\u6765\\u5B9E\\u73B0\\u53EF\\u5237\\u65B0\\u7684\\u6570\\u636E\\u6E90\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import { atomWithRefresh } from 'XXX'\\n\\nconst postsAtom = atomWithRefresh((get) =>\\n  fetch('https://jsonplaceholder.typicode.com/posts').then((r) => r.json()),\\n)\\n\")), mdx(\"p\", null, \"\\u5728\\u4E00\\u4E2A\\u7EC4\\u4EF6\\u4E2D\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const PostsList = () => {\\n  const [posts, refreshPosts] = useAtom(postsAtom)\\n\\n  return (\\n    <div>\\n      <ul>\\n        {posts.map((post) => (\\n          <li key={post.id}>{post.title}</li>\\n        ))}\\n      </ul>\\n\\n      {/* \\u70B9\\u51FB\\u8FD9\\u4E2A\\u6309\\u94AE\\u5C06\\u91CD\\u65B0\\u83B7\\u53D6\\u5E16\\u5B50 */}\\n      <button type=\\\"button\\\" onClick={refreshPosts}>\\n        Refresh posts\\n      </button>\\n    </div>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"cb316b80-a5d1-5923-b2b3-7a2d7edf44f8","slug":"utilities/resettable","__params":{"slug":"utilities"}}},"staticQueryHashes":["171421096","930225796"]}